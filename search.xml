<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《胡适 · 文学改良刍议》</title>
      <link href="/2022/10/20/%E6%96%87%E5%AD%A6%E6%94%B9%E8%89%AF%E5%88%8D%E8%AE%AE/"/>
      <url>/2022/10/20/%E6%96%87%E5%AD%A6%E6%94%B9%E8%89%AF%E5%88%8D%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="《胡适-·-文学改良刍议》"><a href="#《胡适-·-文学改良刍议》" class="headerlink" title="《胡适 · 文学改良刍议》"></a>《胡适 · 文学改良刍议》</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p><strong>文学改良刍议</strong></p><p>胡适</p><p>今之谈文学改良者众矣，记者末学不文，何足以言此。然年来颇于此事再四研思，辅以友朋辩论，其结果所得，颇不无讨论之价值。因综括所怀见解，列为八事，分别言之，以与当世之留意文学改良者一研究之。</p><p>吾以为今日而言文学改良，须从八事入手。八事者何？</p><p>一曰，须言之有物。</p><p>二曰，不摹仿古人。</p><p>三曰，须讲求文法。</p><p>四曰，不作无病之呻吟。</p><p>五曰，务去滥调套语。</p><p>六曰，不用典。</p><p>七曰，不讲对仗。</p><p>八曰，不避俗字俗语。</p><p><strong>一曰须言之有物</strong></p><p>吾国近世文学之大病，在于言之无物。今人徒知“<a href="https://baike.baidu.com/item/%E8%A8%80%E4%B9%8B%E6%97%A0%E6%96%87%EF%BC%8C%E8%A1%8C%E4%B9%8B%E4%B8%8D%E8%BF%9C/6772698?fromModule=lemma_inlink">言之无文，行之不远</a>”，而不知言之无物，又何用文为乎。吾所谓“物”，非古人所谓“<a href="https://baike.baidu.com/item/%E6%96%87%E4%BB%A5%E8%BD%BD%E9%81%93/3534912?fromModule=lemma_inlink">文以载道</a>”之说也。吾所谓“物”，约有二事。</p><p>（一）情感 《诗序》曰，“情动于中而形诸言。言之不足，故嗟叹之。嗟叹之不足，故咏歌之。咏歌之不足，不知手之舞之，足之蹈之也。”此吾所谓情感也。情感者，文学之灵魂。文学而无情感，如人之无魂，木偶而已，行尸走肉而已。（今人所谓“美感”者，亦情感之一也。）</p><p>（二）思想 吾所谓“思想”，盖兼见地、<a href="https://baike.baidu.com/item/%E8%AF%86%E5%8A%9B/10778035?fromModule=lemma_inlink">识力</a>、理想三者而言之。思想不必皆赖文学而传，而文学以有思想而益贵。思想亦以有文学的价值而益资也。此庄周之文，渊明老杜之诗，稼轩之词，<a href="https://baike.baidu.com/item/%E6%96%BD%E8%80%90%E5%BA%B5/169936?fromModule=lemma_inlink">施耐庵</a>之小说，所以夐绝于古也。思想之在文学，犹脑筋之在人身。人不能思想，则虽面目姣好，虽能笑啼感觉，亦何足取哉。文学亦犹是耳。</p><p>文学无此二物，便如无灵魂无脑筋之美人，虽有<a href="https://baike.baidu.com/item/%E7%A7%BE%E4%B8%BD/10136125?fromModule=lemma_inlink">秾丽</a>富厚之外观，抑亦未矣。近世文人沾沾于声调字句之间，既无高远之思想，又无真挚之情感，文学之衰微，此其大因矣。此文胜之害，所谓言之无物者是也。欲救此弊，宜以质救之。质者何，情与思二者而已。</p><p><strong>二曰不摹仿古人</strong></p><p>文学者，随时代而变迁者也。一时代有一时代之文学。周秦有周秦之文学，汉魏有汉魏之文学，唐宋元明有唐宋元明之文学。此非吾一人之<a href="https://baike.baidu.com/item/%E7%A7%81%E8%A8%80/6811636?fromModule=lemma_inlink">私言</a>，乃文明进化之公理也。即以文论，有《尚书》之文，有先秦诸子之文，有<a href="https://baike.baidu.com/item/%E5%8F%B8%E9%A9%AC%E8%BF%81/65648?fromModule=lemma_inlink">司马迁</a><a href="https://baike.baidu.com/item/%E7%8F%AD%E5%9B%BA/81828?fromModule=lemma_inlink">班固</a>之文，有<a href="https://baike.baidu.com/item/%E9%9F%A9%E6%9F%B3/80065?fromModule=lemma_inlink">韩柳</a>欧苏之文，有语录之文，有<a href="https://baike.baidu.com/item/%E6%96%BD%E8%80%90%E5%BA%B5/169936?fromModule=lemma_inlink">施耐庵</a><a href="https://baike.baidu.com/item/%E6%9B%B9%E9%9B%AA%E8%8A%B9/14919?fromModule=lemma_inlink">曹雪芹</a>之文。此文之进化也。试更以韵文言之。击壤之歌，五子之歌，一时期也。三百篇之诗，一时期也。<a href="https://baike.baidu.com/item/%E5%B1%88%E5%8E%9F/6109?fromModule=lemma_inlink">屈原</a>荀卿之骚赋，又一时期也。苏李以下，至于魏晋，又一时期也。江左之诗流为排比，至唐而律诗大成，此又一时期也。老杜香山之”写实”体诸诗（如杜之《石壕吏》、《羌村》，白之《新乐府》），又一时期也。诗至唐而极盛，自此以后，词曲代兴。唐五代及宋初之小令，此词之一时代也。苏柳（永）辛姜之词，又一时代也。至于元之杂剧传奇，则又一时代矣。凡此诸时代，各因时势风会而变，各有其特长。吾辈以历史进化之眼光观之，决不可谓古人之文学皆胜于今人也。左氏史公之文奇矣。然<a href="https://baike.baidu.com/item/%E6%96%BD%E8%80%90%E5%BA%B5/169936?fromModule=lemma_inlink">施耐庵</a>之《水浒传》视《左传》、《史记》，何多让焉。《三都》、《两水》之赋富矣。然以视<a href="https://baike.baidu.com/item/%E5%94%90%E8%AF%97%E5%AE%8B%E8%AF%8D/8584359?fromModule=lemma_inlink">唐诗宋词</a>，则糟粕耳。此可见文学因时进化，不能自止。唐人不当作商周之诗，宋人不当作相如子云之赋。即令作之，亦必不工，逆天背时，违进化之迹，故不能工也。</p><p>既明文学进化之理，然后可言吾所谓“不摹仿古人”之说。今日之中国，当造今日之文学。不必摹仿唐宋，亦不必摹仿周秦也。前见国会开幕词，有云，“于铄国会，遵晦时休”。此在今日而欲为三代以上之文之一证也。更观今之“文学大家”，文则下规姚曾，上师韩欧，更上则取法<a href="https://baike.baidu.com/item/%E7%A7%A6%E6%B1%89/12702597?fromModule=lemma_inlink">秦汉</a>魏晋，以为六朝以下无文学可言，此皆百步与五十步之别而已，而皆为文学下乘。即令神似古人，亦不过为博物院中添几许“逼真赝鼎”而已，文学<a href="https://baike.baidu.com/item/%E4%BA%91%E4%B9%8E%E5%93%89?fromModule=lemma_inlink">云乎哉</a>。昨见陈伯严先生一诗云：</p><p>涛园钞杜句，半岁秃千毫。所得都成泪，相过问<a href="https://baike.baidu.com/item/%E5%A5%8F%E5%88%80?fromModule=lemma_inlink">奏刀</a>。万灵噤不下，此老仰<a href="https://baike.baidu.com/item/%E5%BC%A5%E9%AB%98?fromModule=lemma_inlink">弥高</a>。胸腹回滋味，徐看薄命骚。</p><p>此<a href="https://baike.baidu.com/item/%E5%A4%A7%E8%B6%B3?fromModule=lemma_inlink">大足</a>代表今日“第一流诗人”摹仿古人之心理也。其病根所在，在于以“半岁秃千毫”之工夫作古人的钞胥奴婢，故有“此老仰弥高”之叹。若能洒脱此种奴性，不作古人的诗，而惟作我自己的诗，则决不致如此失败矣！</p><p>吾每谓今日之文学，其足与世界“第一流”文学比较而<a href="https://baike.baidu.com/item/%E6%97%A0%E6%84%A7%E8%89%B2?fromModule=lemma_inlink">无愧色</a>者，独有白话小说（我佛山人、<a href="https://baike.baidu.com/item/%E5%8D%97%E4%BA%AD%E4%BA%AD%E9%95%BF?fromModule=lemma_inlink">南亭亭长</a>、洪都百炼生三人而已。）一项。此无他故，以此种小说皆不事摹仿古人，（三人皆得力于《<a href="https://baike.baidu.com/item/%E5%84%92%E6%9E%97%E5%A4%96%E5%8F%B2?fromModule=lemma_inlink">儒林外史</a>》、《水浒》、《<a href="https://baike.baidu.com/item/%E7%9F%B3%E5%A4%B4%E8%AE%B0/35036?fromModule=lemma_inlink">石头记</a>》。然非摹仿之作也。）而惟实写今日社会之情状，故能成真正文学。其他学这个，学那个之诗<a href="https://baike.baidu.com/item/%E5%8F%A4%E6%96%87%E5%AE%B6?fromModule=lemma_inlink">古文家</a>，皆无文学之价值也。今之有志文学者，宜知所从事矣。</p><p><strong>三曰须讲求文法</strong></p><p>今之作文作诗者，每不讲求文法之结构。其例至繁，不便举之，尤以作骈文律诗者为尤甚。夫不讲文法，是谓”不通”。此理至明，无待详论。</p><p><strong>四曰不作无病之呻吟</strong></p><p>此殊未易言也。今之少年往往作悲观。其取别号则曰”寒灰”、”无生”、”死灰”。其作为诗文，则对落日而思暮年，对秋风而思零落，春来则惟恐其速去，花发又惟惧其早谢。此亡国之哀音也。老年人为之犹不可，况少年乎。其<a href="https://baike.baidu.com/item/%E6%B5%81%E5%BC%8A?fromModule=lemma_inlink">流弊</a>所至，遂养成一种暮气，不思奋发有为，服劳报国，但知发牢骚之音，感唱之文。作者将以促其寿年，读者将亦短其志气，此吾所谓无病之呻吟也。国之多患，吾岂不知之。然病国危时，岂痛哭流涕所能收效乎。吾惟愿今之文学家作费舒特，作玛志尼，而不愿其为<a href="https://baike.baidu.com/item/%E8%B4%BE%E7%94%9F/69793?fromModule=lemma_inlink">贾生</a>、<a href="https://baike.baidu.com/item/%E7%8E%8B%E7%B2%B2?fromModule=lemma_inlink">王粲</a>、<a href="https://baike.baidu.com/item/%E5%B1%88%E5%8E%9F?fromModule=lemma_inlink">屈原</a>、谢皋羽也。其不能为贾生、王某、屈原、谢皋羽，而徒为<a href="https://baike.baidu.com/item/%E5%A6%87%E4%BA%BA%E9%86%87%E9%85%92?fromModule=lemma_inlink">妇人醇酒</a>丧气失意之诗文者，尤<a href="https://baike.baidu.com/item/%E5%8D%91%E5%8D%91%E4%B8%8D%E8%B6%B3%E9%81%93?fromModule=lemma_inlink">卑卑不足道</a>矣！</p><p><strong>五曰务去滥调套语</strong></p><p>今之学者，胸中记得几个文学的套语，便称诗人。其所为诗文处处是陈言滥调，“磋跎”、“身世”、“寥落”、“飘零”、“<a href="https://baike.baidu.com/item/%E8%99%AB%E6%B2%99?fromModule=lemma_inlink">虫沙</a>”、“寒窗”、“斜阳”、“芳草”、“春闺”、“愁魂”、“<a href="https://baike.baidu.com/item/%E5%BD%92%E6%A2%A6?fromModule=lemma_inlink">归梦</a>”、“<a href="https://baike.baidu.com/item/%E9%B9%83%E5%95%BC?fromModule=lemma_inlink">鹃啼</a>”、“孤影”、“<a href="https://baike.baidu.com/item/%E9%9B%81%E5%AD%97?fromModule=lemma_inlink">雁字</a>”、“玉楼”、“<a href="https://baike.baidu.com/item/%E9%94%A6%E5%AD%97?fromModule=lemma_inlink">锦字</a>”、“<a href="https://baike.baidu.com/item/%E6%AE%8B%E6%9B%B4?fromModule=lemma_inlink">残更</a>”，……之类，累累不绝，最可惜厌。其流弊所至，遂令国中生出许多<a href="https://baike.baidu.com/item/%E4%BC%BC%E6%98%AF%E8%80%8C%E9%9D%9E?fromModule=lemma_inlink">似是而非</a>，貌似而实非之诗文。今试举一例以证之。</p><p>“荧荧夜灯如豆，映幢幢孤影，凌乱无据。翡翠衾寒，鸳鸯瓦冷，禁得秋宵几度。<a href="https://baike.baidu.com/item/%E5%B9%BA%E5%BC%A6?fromModule=lemma_inlink">幺弦</a>漫语，早<a href="https://baike.baidu.com/item/%E4%B8%81%E5%AD%97%E5%B8%98?fromModule=lemma_inlink">丁字帘</a>前，繁霜飞舞。袅袅余音，片时犹绕柱。”</p><p>此词骤观之，觉字字句句皆词也。其实仅一大堆陈套语耳。“翡翠衾”、“鸳鸯瓦”，用之白香山《长恨歌》则可，以其所言乃帝王之衾之瓦也。“丁字帘”、“幺弦”，皆套语也。此词在美国所作，其夜灯决不“荧荧如豆”，其居室尤无“柱”可绕也。至于“繁霜飞舞”，则更<a href="https://baike.baidu.com/item/%E4%B8%8D%E6%88%90%E8%AF%9D?fromModule=lemma_inlink">不成话</a>矣。谁曾见繁霜之“飞舞”耶？</p><p>吾所谓务去滥调套语者，别无他法，惟在人人以其耳目所亲见、亲闻、所亲身阅历之事物，—一自己铸词以形容描写之。但求其不失真，但求能达其状物写意之目的，即是工夫。其用滥调套语者，皆懒惰不肯自己铸词状物者也。</p><p><strong>六曰不用典</strong></p><p>吾所主张八事之中，惟此一条最受友朋攻击，盖以此条最易误会也。吾友<a href="https://baike.baidu.com/item/%E6%B1%9F%E4%BA%A2%E8%99%8E?fromModule=lemma_inlink">江亢虎</a>君<a href="https://baike.baidu.com/item/%E6%9D%A5%E4%B9%A6?fromModule=lemma_inlink">来书</a>日：</p><p>“所谓典者，亦有广狭二义。<a href="https://baike.baidu.com/item/%E9%A5%BE%E9%A5%A4?fromModule=lemma_inlink">饾饤</a><a href="https://baike.baidu.com/item/%E7%8D%AD%E7%A5%AD?fromModule=lemma_inlink">獭祭</a>，古人早<a href="https://baike.baidu.com/item/%E6%82%AC%E4%B8%BA%E5%8E%89%E7%A6%81?fromModule=lemma_inlink">悬为厉禁</a>。若并成语故事而屏之，则非惟文字之品格全失，即文字之作用亦亡。……文字最妙之意味，在用字简而涵意多。此断非用典不为功。不用典不特不可作诗，并不可写信，且不可演说。来函满纸‘<a href="https://baike.baidu.com/item/%E6%97%A7%E9%9B%A8?fromModule=lemma_inlink">旧雨</a>’‘虚怀’，‘治头治脚’、‘<a href="https://baike.baidu.com/item/%E8%88%8D%E6%9C%AC%E9%80%90%E6%9C%AB?fromModule=lemma_inlink">舍本逐末</a>’、‘<a href="https://baike.baidu.com/item/%E6%B4%AA%E6%B0%B4%E7%8C%9B%E5%85%BD?fromModule=lemma_inlink">洪水猛兽</a>’、‘发聋振瞶’、‘<a href="https://baike.baidu.com/item/%E8%B4%9F%E5%BC%A9?fromModule=lemma_inlink">负弩</a>先驱’、‘心悦诚服’、‘词坛’、‘<a href="https://baike.baidu.com/item/%E9%80%80%E9%81%BF%E4%B8%89%E8%88%8D?fromModule=lemma_inlink">退避三舍</a>’、‘<a href="https://baike.baidu.com/item/%E6%97%A0%E7%97%85%E5%91%BB%E5%90%9F?fromModule=lemma_inlink">无病呻吟</a>’、‘滔天’、‘利器’、‘铁证’，……皆典也。试尽抉而去之，代以<a href="https://baike.baidu.com/item/%E4%BF%9A%E8%AF%AD?fromModule=lemma_inlink">俚语</a>俚字，将<a href="https://baike.baidu.com/item/%E6%88%90%E4%BD%95?fromModule=lemma_inlink">成何</a>说话。其用字之繁简，犹其细焉。恐一易他词，虽加倍蓰而涵义仍终不能如是恰到好处，奈何。……”</p><p>此论极中肯要。今依<a href="https://baike.baidu.com/item/%E6%B1%9F%E5%90%9B?fromModule=lemma_inlink">江君</a>之言，分典为广狭二义，分论之如下：</p><p>（一）广义之典非吾所谓典也。广义之典约有五种。</p><p>（甲）古人所设譬喻，其取譬之事物，含有普通意义，不以时代而失其效用者，今人亦可用之。如古人言“以子之矛攻子之盾”。今人虽不读书者，亦知用“自相矛盾”之喻。然不可谓为用典也，上文所举例中之“治头治脚”、“<a href="https://baike.baidu.com/item/%E6%B4%AA%E6%B0%B4%E7%8C%9B%E5%85%BD?fromModule=lemma_inlink">洪水猛兽</a>”、“发聋振瞶”，……皆此类也。盖设譬取喻，贵能切当，若能切当，固无古今之别也。若“负导先驱”、“<a href="https://baike.baidu.com/item/%E9%80%80%E9%81%BF%E4%B8%89%E8%88%8D?fromModule=lemma_inlink">退避三舍</a>”之类，在今日已非通行之事物，在文人相与之间，或可用之，然终以不用为上。如言“退避”，千里亦可，百里亦可，不必定用“<a href="https://baike.baidu.com/item/%E4%B8%89%E8%88%8D?fromModule=lemma_inlink">三舍</a>”之典也。</p><p>（乙）成语 成语者，合字成辞，别为意义。其习见之句，通行已久，不妨用之。然今日若能另铸”成语”，亦无不可也。“利器”、“虚怀”、“<a href="https://baike.baidu.com/item/%E8%88%8D%E6%9C%AC%E9%80%90%E6%9C%AB?fromModule=lemma_inlink">舍本逐末</a>”，……皆属此类。非此“典”也，乃日用之字耳。</p><p>（丙）引史事 引史事与今所论议之事相比较，不可谓为用典也。如老杜诗云，“未闻殷周衰，中自诛褒妲”，此非用典也。近人诗云，“所以<a href="https://baike.baidu.com/item/%E6%9B%B9%E5%AD%9F%E5%BE%B7?fromModule=lemma_inlink">曹孟德</a>，犹以汉相终”，此亦非用典也。</p><p>（丁）引古人作比 此亦非用典也。杜诗云，“清新庾开府，俊逸鲍参军”，此乃以古人比今人，非用典也。又云，“<a href="https://baike.baidu.com/item/%E4%BC%AF%E4%BB%B2%E4%B9%8B%E9%97%B4?fromModule=lemma_inlink">伯仲之间</a>见伊吕，指挥若定失萧曹”，此亦非用典也。</p><p>（戊）引古人之语 此亦非用典也。吾尝有句云，“我闻古人言，艰难惟一死”。又云，“‘尝试成功自古无，<a href="https://baike.baidu.com/item/%E6%94%BE%E7%BF%81?fromModule=lemma_inlink">放翁</a>此语未必是”’。此乃引语，非用典也。</p><p>以上五种为广义之典，其实非吾所谓典也。若此者可用可不用。</p><p>（二）狭义之典，吾所主张不用者也。吾所谓“用典”者，调文人词客不能自己铸词造句，以写眼前之景，胸中之意，故借用或不全切，或全不切之故事陈言以代之，以图含混过去。是谓“用典”。上所述广义之典，除戊条外，皆为取譬比方之辞。但以彼喻此，而非以彼代此也。狭义之用典，则全为以典代言，自己不能直言之，故用典以言之耳。此吾所谓用典与非用典之别也。狭义之典亦有工拙之别，其工者<a href="https://baike.baidu.com/item/%E5%81%B6%E4%B8%80?fromModule=lemma_inlink">偶一</a>用之，未为不可，其拙者则当痛绝之已。</p><p>（子）用典之工者 此<a href="https://baike.baidu.com/item/%E6%B1%9F%E5%90%9B?fromModule=lemma_inlink">江君</a>所谓用字简而涵义多者也。客中无书不能多举其例，但杂举一二，以实吾言。</p><p>（l）东坡所藏<a href="https://baike.baidu.com/item/%E4%BB%87%E6%B1%A0%E7%9F%B3?fromModule=lemma_inlink">仇池石</a>，<a href="https://baike.baidu.com/item/%E7%8E%8B%E6%99%8B%E5%8D%BF/3303080?fromModule=lemma_inlink">王晋卿</a>以诗借现，意在于夺。东坡不敢不借，先以诗寄之，有句云，“欲留嗟赵弱，宁<a href="https://baike.baidu.com/item/%E8%AE%B8%E8%B4%9F?fromModule=lemma_inlink">许负</a>秦曲。<a href="https://baike.baidu.com/item/%E4%BC%A0%E8%A7%82?fromModule=lemma_inlink">传观</a>慎勿许，间道归应速。”此用<a href="https://baike.baidu.com/item/%E8%94%BA%E7%9B%B8%E5%A6%82?fromModule=lemma_inlink">蔺相如</a>返壁之典，何其工切也。</p><p>（2）<a href="https://baike.baidu.com/item/%E4%B8%9C%E5%9D%A1?fromModule=lemma_inlink">东坡</a>又有“章质夫送酒六壶，书至而酒不达。”诗云，“岂意青州六从事，化为乌有一先生”。此虽工已近于纤巧矣。</p><p>（3）吾十年前尝有读《<a href="https://baike.baidu.com/item/%E5%8D%81%E5%AD%97%E5%86%9B%E8%8B%B1%E9%9B%84%E8%AE%B0?fromModule=lemma_inlink">十字军英雄记</a>》一诗云，“岂有酖人羊叔子，焉知微服赵主父，十字军真儿戏耳，独此两人可千古”‘。以两典包尽全书，当时颇沾沾自喜，其实此种诗，尽可不作也。</p><p>（4）<a href="https://baike.baidu.com/item/%E6%B1%9F%E4%BA%A2%E8%99%8E?fromModule=lemma_inlink">江亢虎</a>代华侨诔陈英土文有“本悬太白，先坏长城。世无<a href="https://baike.baidu.com/item/%E9%89%8F%E9%9C%93?fromModule=lemma_inlink">鉏霓</a>，乃戕赵卿”四句，余极喜之。所用<a href="https://baike.baidu.com/item/%E8%B5%B5%E5%AE%A3%E5%AD%90?fromModule=lemma_inlink">赵宣子</a>一典，甚工切也。</p><p>（5）<a href="https://baike.baidu.com/item/%E7%8E%8B%E5%9B%BD%E7%BB%B4?fromModule=lemma_inlink">王国维</a>咏史诗，有“虎狼在堂室，徒戎复何补。神州遂<a href="https://baike.baidu.com/item/%E9%99%86%E6%B2%89?fromModule=lemma_inlink">陆沉</a>，百年委榛莽。寄语桓元子，莫罪王夷甫。”此亦可谓使事之工者矣。</p><p>上述诸例，皆以典代言，其妙处，终在不失设譬比方之原意。惟为文体所限，故譬喻变而为称代耳。用典之弊，在于使人失其所欲譬喻之原意。若<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%AE%A2%E4%B8%BA%E4%B8%BB?fromModule=lemma_inlink">反客为主</a>，使读者迷于使事用典之繁，而转忘其所为设譬之事物，则为拙矣。古人虽作百韵长诗，其所用典不出一二事而已。（“<a href="https://baike.baidu.com/item/%E5%8C%97%E5%BE%81?fromModule=lemma_inlink">北征</a>”与白香山“悟真寺诗”皆不用一典。）今人作长律则非典不能下笔矣。尝见一诗八十四韵，而用典至百余事，宜其不能工也。</p><p>（丑）用典之拙者 用典之拙者，大抵皆衰情之人，不知造词，故以此为躲懒藏拙之计。惟其不能造词，故亦不能用典也。总计拙典亦有数类：</p><p>（1）比例泛而不切，可作几种解释，无确定之根据。今取<a href="https://baike.baidu.com/item/%E7%8E%8B%E6%B8%94%E6%B4%8B?fromModule=lemma_inlink">王渔洋</a>“<a href="https://baike.baidu.com/item/%E7%A7%8B%E6%9F%B3?fromModule=lemma_inlink">秋柳</a>”一章证之。</p><p>“娟娟凉露欲为霜，万缕千条拂玉塘，浦里青行中妇镜，江于黄竹女儿箱。空怜<a href="https://baike.baidu.com/item/%E6%9D%BF%E8%AF%9D?fromModule=lemma_inlink">板话</a>隋堤水，不见琅琊大道王。若过洛阳风景地，含情重问<a href="https://baike.baidu.com/item/%E6%B0%B8%E4%B8%B0?fromModule=lemma_inlink">永丰</a>坊。”</p><p>此诗中所用诸典无不可作几样说法者。</p><p>（2）僻典使人不解。夫文学所以达意抒情也。若必求人人能读<a href="https://baike.baidu.com/item/%E4%BA%94%E8%BD%A6%E4%B9%A6?fromModule=lemma_inlink">五车书</a>，然后能通其文，则此种文可不作矣。</p><p>（3）刻削古典成语，不合文法。”指兄弟以<a href="https://baike.baidu.com/item/%E5%AD%94%E6%80%80?fromModule=lemma_inlink">孔怀</a>，称在位以曾是”（<a href="https://baike.baidu.com/item/%E7%AB%A0%E5%A4%AA%E7%82%8E?fromModule=lemma_inlink">章太炎</a>语），是其例也。今人言”为人作嫁”亦不通。</p><p>（4）用典而失其原意。如某君写山高与天接之状，而曰”西接杞天倾”是也。</p><p>（5）古事之实有所指，不可移用者，今往乱用作普通事实。如古人<a href="https://baike.baidu.com/item/%E7%81%9E%E6%A1%A5%E6%8A%98%E6%9F%B3?fromModule=lemma_inlink">灞桥折柳</a>，以送行者，本是一种特别土风。阳关<a href="https://baike.baidu.com/item/%E6%B8%AD%E5%9F%8E?fromModule=lemma_inlink">渭城</a>亦皆实有所指。今之懒人不能状别离之情，于是虽身在滇越，亦言灞桥，虽不解阳关渭城为何物，亦皆“<a href="https://baike.baidu.com/item/%E9%98%B3%E5%85%B3%E4%B8%89%E8%BF%AD?fromModule=lemma_inlink">阳关三迭</a>”、“渭城离歌”。又如<a href="https://baike.baidu.com/item/%E5%BC%A0%E7%BF%B0/4945365?fromModule=lemma_inlink">张翰</a>因秋风起而思故乡之莼羹鲈脍，今则虽非吴人，不知莼鲈为何味者，亦皆自称有“<a href="https://baike.baidu.com/item/%E8%8E%BC%E9%B2%88%E4%B9%8B%E6%80%9D?fromModule=lemma_inlink">莼鲈之思</a>”。此则不仅懒不可救，直是自欺欺人耳！</p><p>凡此种种，皆文人之不下工夫，一受其毒，便不可救。此吾所以有“不用典”之说也。</p><p><strong>七曰不讲对仗</strong></p><p>排偶乃人类言语之一种特性，故虽古代文字，如<a href="https://baike.baidu.com/item/%E8%80%81%E5%AD%90?fromModule=lemma_inlink">老子</a>孔子之文，亦间有骈句。如“<a href="https://baike.baidu.com/item/%E9%81%93%E5%8F%AF%E9%81%93%EF%BC%8C%E9%9D%9E%E5%B8%B8%E9%81%93?fromModule=lemma_inlink">道可道，非常道</a>；名可名，非常名。无名天地之始，有名万物之母。故常无，欲以观其妙；常有，欲以观其徼。”此三排句也。“<a href="https://baike.baidu.com/item/%E9%A3%9F%E6%97%A0%E6%B1%82%E9%A5%B1%EF%BC%8C%E5%B1%85%E6%97%A0%E6%B1%82%E5%AE%89?fromModule=lemma_inlink">食无求饱，居无求安</a>”。“贫而无诌，富而无骄”。“尔爱其羊，我爱其礼”。此皆排句也。然此皆近于语言之自然，而无牵强刻削之迹；尤未有定其字之多寡，声之平仄，词之虚实者也。至于后世文学末流，言之无物，乃以<a href="https://baike.baidu.com/item/%E6%96%87%E8%83%9C?fromModule=lemma_inlink">文胜</a>。文胜之极，而骈文律诗兴焉，而长律兴焉。骈文律诗之<a href="https://baike.baidu.com/item/%E4%B8%AD%E9%9D%9E?fromModule=lemma_inlink">中非</a>无佳作，然佳作终鲜。所以然者何。岂不以其束缚人之自由过甚之故耶。（长律之中，上下古今，无一首佳作可言也。）今日而言文学改良，当”先立乎其大者”，不当枉废有用之精力于微细纤巧之末。此吾所以有废骈废律之说也。即不能废此两者，亦但当视为文学未技而已，非讲求之急务也。</p><p>今人犹有鄙夷白话小说为文学小道者。不知<a href="https://baike.baidu.com/item/%E6%96%BD%E8%80%90%E5%BA%B5?fromModule=lemma_inlink">施耐庵</a>、<a href="https://baike.baidu.com/item/%E6%9B%B9%E9%9B%AA%E8%8A%B9?fromModule=lemma_inlink">曹雪芹</a>、吴趼人皆文学正宗，而骈文律诗乃真小道耳。吾知必有闻此言而却走者矣。</p><p><strong>八曰不避俗字俗语</strong></p><p>吾惟以<a href="https://baike.baidu.com/item/%E6%96%BD%E8%80%90%E5%BA%B5?fromModule=lemma_inlink">施耐庵</a>、<a href="https://baike.baidu.com/item/%E6%9B%B9%E9%9B%AA%E8%8A%B9?fromModule=lemma_inlink">曹雪芹</a>、吴趼人为文学正宗，故有“不避俗字俗语”之论也（参看上文第二条下）。盖吾国言文之<a href="https://baike.baidu.com/item/%E8%83%8C%E9%A9%B0?fromModule=lemma_inlink">背驰</a>久矣。自<a href="https://baike.baidu.com/item/%E4%BD%9B%E4%B9%A6?fromModule=lemma_inlink">佛书</a>之输入，译者以文言不足以达意，故以浅近之文译之，其体已近白话。其后佛氏讲义语录尤多用白话为之者，是为<a href="https://baike.baidu.com/item/%E8%AF%AD%E5%BD%95%E4%BD%93?fromModule=lemma_inlink">语录体</a>之原始。及宋人讲学以白话为语录，此体遂成讲学正体。（明人因之。）当是时，白话已久入韵文，观唐宋人白话之诗词可见也。及至元时，中国北部已在异族之下，三百余年矣（辽、金、元）。此三百年中，中国乃发生一种通俗行远之文学。文则有《<a href="https://baike.baidu.com/item/%E6%B0%B4%E6%B5%92?fromModule=lemma_inlink">水浒</a>》、《<a href="https://baike.baidu.com/item/%E8%A5%BF%E6%B8%B8?fromModule=lemma_inlink">西游</a>》、《<a href="https://baike.baidu.com/item/%E4%B8%89%E5%9B%BD?fromModule=lemma_inlink">三国</a>》之类，戏曲则尤不可胜计。（<a href="https://baike.baidu.com/item/%E5%85%B3%E6%B1%89%E5%8D%BF?fromModule=lemma_inlink">关汉卿</a>诸人，人各著剧数十种之多。吾国文人著作之富，未有过于此时者也。）以今世眼光观之，则中国文学当以元代为最盛，可传世不朽之作，当以元代为最多。此可无疑也。当是时，中国之文学最近言文合一。白话几成文学的语言矣。使此趋势不受阻遏，则中国乃有“活文学出现”，而<a href="https://baike.baidu.com/item/%E4%BD%86%E4%B8%81?fromModule=lemma_inlink">但丁</a>、路得之伟业，（欧洲中古时，各国皆有俚语，而以拉丁文为文言，凡著作书籍皆用之，如吾国之以文言著书也。其后意大利有但丁诸文豪，始以其国俚语著作。诸国踵兴，国语亦代起。路得创新教始以德文译旧约新约，遂开德文学之先。英法诸国亦复如是。今世通用之英文新旧约乃一六-一年<a href="https://baike.baidu.com/item/%E8%AF%91%E6%9C%AC?fromModule=lemma_inlink">译本</a>，距今才三百年耳。故今日欧洲诸国之文学，在当日皆为俚语。造诸文豪兴，始以“活文学”代拉丁之死文学。有活文学而后有言文合一之国语也。）凡发生于神州。不意此趋势骤为明代所阻，政府既以八股取士，而当时文人如何李七子之徒，又争以复古为高，于是此千年难遇言文合一之机会，遂中道夭折矣。然以今世历史进化的眼光观之，则<a href="https://baike.baidu.com/item/%E7%99%BD%E8%AF%9D%E6%96%87%E5%AD%A6?fromModule=lemma_inlink">白话文学</a>之为中国文学之正宗，又为将来文学必用之利器，可断言也。（此“断言”乃自作者言之，赞成此说者今日未必甚多也。）以此之故，吾主张今日作文作诗，宜采用俗语俗字。与其用三千年前之死字（如“于铄国会，遵晦时休”之类），不如用二十世纪之活字。与其作不能行远不能普及之<a href="https://baike.baidu.com/item/%E7%A7%A6%E6%B1%89?fromModule=lemma_inlink">秦汉</a>六朝文字，不如作家喻户晓之《水浒》、《西游》文字也。</p><p>上述八事，乃吾年来研思此一大问题之结果。远在异国，既无读书之暇晷，又不得就国中先生长者质疑问题，其所主张容有<a href="https://baike.baidu.com/item/%E7%9F%AB%E6%9E%89%E8%BF%87%E6%AD%A3?fromModule=lemma_inlink">矫枉过正</a>之处。然此八事皆文学上根本问题，—一有研究之价值。故草成此论，以为海内外留心此问题者作一草案。谓之刍议，犹云未定草也。<a href="https://baike.baidu.com/item/%E4%BC%8F%E6%83%9F?fromModule=lemma_inlink">伏惟</a>国人同志有以匡纠是正之。[1]</p><p>（原载1917年1月1日 “新青年”2卷5号）</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li><p>本文原载1917年1月1日《新青年》第二卷第五号。写作此文时,作者尚在美国。</p></li><li><p>击壤之歌:传说为尧时的歌。五子之歌:传说是夏时的歌。</p></li><li><p>三百篇:指《诗经》。</p></li><li><p>屈原荀卿之骚赋:屈原著《<a href="https://www.pinshiwen.com/chuci/20181029775.html">离骚</a>》,荀卿(即荀况,通谓荀子)著《成相赋》,为辞赋之祖。</p></li><li><p>苏李:指苏武和李陵。《古诗源》收有苏武诗四首、李陵诗三首,据称是汉五言诗之滥觞,但二人这些赠答之诗并不可靠,恐为后人伪托。</p></li><li><p>江左:江淹和左思。</p></li><li><p>老杜香山:杜甫和白居易。</p></li><li><p>苏柳辛姜:苏轼、柳永、辛弃疾、萎夔,宋词的四位代表人物。</p></li><li><p>左氏史公:《左传》作者左丘明,《史记》作者司马迁。</p></li><li><p>《三都》、《两京》:汉赋名篇班固的《西都赋》《东都赋》、扬雄的《蜀都赋》以及张衡的《西京赋》、《东京赋》。下文的相如、子云,指司马相如、扬雄(字子云),均汉赋作家。</p></li><li><p>国会:指当时北洋军阀政府操纵下的中华民国国会。这个国会的开幕词使用的是三千年前《尚书》的字汇,乃早已死亡的词语。</p></li><li><p>姚曾:姚鼐和曾国藩,他们都提倡古文。</p></li><li><p>韩欧:唐代的韩愈和宋代的欧阳修。</p></li><li><p>陈伯严:当时以旧体诗词创作闻名的诗人。</p></li><li><p>我佛山人、南亭亭长、洪都百炼生:三位通俗小说作家的笔名。吴趼人自称我佛山人,著有《二十年目睹之怪现状》等;李宝嘉自称南亭亭长,著有《官场现形记》;刘鹗自称洪都百炼生,著有《老残游记》。</p></li><li><p>江亢虎(1883～1954):江西人,早年留学日本,游历欧洲,受无政府主义影响,民国初年创立中国社会党,投靠北洋军阀政府,成为投机政客,1921年以中国社会党领袖身份出席共产国际第三次代表大会,后赴加拿大大学任中国文学院院长兼汉学教授。抗战时期投靠日寇,任汪精卫伪国民政府考试院院长。后以汉奸罪被捕,病死狱中。</p></li><li><p>饾饤獭祭:饾饤,筵席上盘碟中堆叠的食品。獭祭:远古的一种祭祀名称。这两个词语都是已经死了的词语,废弃不再使用。</p></li><li><p>语见《<a href="https://www.pinshiwen.com/zhiyan/lz/">老子</a>》。② 语见《论语》。</p></li><li><p>何李七子:指何景明、李攀龙等明代提倡文学复古的前七子和后七子。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 文学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文学 </tag>
            
            <tag> 近现代 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>g++入门教程</title>
      <link href="/2022/10/12/g++%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2022/10/12/g++%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="g-入门教程"><a href="#g-入门教程" class="headerlink" title="g++入门教程"></a>g++入门教程</h1><h2 id="1-g-简介"><a href="#1-g-简介" class="headerlink" title="1.g++简介"></a>1.g++简介</h2><p>g++ 是 GNU 开发的 C++ 编译器，是 GCC（GNU Compiler Collection）GNU 编译器套件的组成部分。另外，gcc 是 GNU 的 C 编译器。</p><p>看官方手册你会发现 g++ 的命令选项真的多如繁星，令人头皮发麻。但是常用的命令选项也就那几个，足以完成日常编译。</p><p>g++ 编译器是 GCC 的一部分，GCC 编译工作一般分为四个步骤： </p><p>（1）预处理（Preprocessing）。由预处理器 cpp 完成，将. cpp 源文件预处理为. i 文件。</p><pre class="line-numbers language-none"><code class="language-none">g++  -E  test.cpp  -o  test.i    &#x2F;&#x2F;生成预处理后的.i文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）编译（Compilation）。由编译器 cc1plus 完成，将. i 文件编译为. s 的汇编文件。使用<code>-S</code>选项，只进行编译而不进行汇编，生成汇编代码。</p><pre class="line-numbers language-none"><code class="language-none">g++ -S test.i -o test.s&#x2F;&#x2F;生成汇编.s文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）汇编（Assembly）。由汇编器 as 完成，将. s 文件汇编成. o 的二进制目标文件。</p><pre class="line-numbers language-none"><code class="language-none">g++  -c  test.s  -o  test.o    &#x2F;&#x2F;生成二进制.o文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（4）链接（Linking）。由链接器 ld，将. o 文件连接生成可执行程序。</p><pre class="line-numbers language-none"><code class="language-none">g++ test.o  -o  test.out    &#x2F;&#x2F;生成二进制.out可执行文件 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-命令格式"><a href="#2-命令格式" class="headerlink" title="2.命令格式"></a>2.命令格式</h2><pre class="line-numbers language-none"><code class="language-none">gcc [-c|-S|-E] [-std&#x3D;standard]    [-g] [-pg] [-Olevel]    [-Wwarn...] [-pedantic]    [-Idir...] [-Ldir...]    [-Dmacro[&#x3D;defn]...] [-Umacro]    [-foption...] [-mmachine-option...]    [-o outfile] [@file] infile...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-命令选项"><a href="#3-命令选项" class="headerlink" title="3.命令选项"></a>3.命令选项</h2><p>关于 g++ 的命令选项，可以参考 <a href="http://baike.baidu.com/link?url=FQvGegKMC9UsRPbdBRSRkto7y-QJuy093kei3dqlVwzghhwZv_i3nD53Xtq16n4_26phqLxD4DKCqnXSQ17Az_">g++ 百度百科</a>或者 <a href="https://gcc.gnu.org/onlinedocs/gcc-6.1.0/gcc.pdf">GCC 官方手册</a>，或者使用<code>man g++</code>单独查看 g++ 使用手册。</p><p>下面列出常用的命令选项。 </p><p><strong>（1）总体选项</strong></p><pre class="line-numbers language-none"><code class="language-none">-E只激活预处理,这个不生成文件,你需要把它重定向到一个输出文件里面。例子用法:   gcc -E hello.c &gt; pianoapan.txt   gcc -E hello.c | more   慢慢看吧,一句&#96;hello word&#96;也要预处理成800行的代码。     -S   只激活预处理和编译，就是指把文件编译成为汇编代码。例子用法： gcc -S hello.c   将生成.s的汇编代码，可以用文本编辑器查看。    -c    只激活预处理,编译,和汇编,也就是他只把程序做成obj文件。例子用法:   gcc -c hello.c   将生成.o的目标文件（object file）。 -o指定目标名称，缺省的时候，gcc&#x2F;g++编译出来的文件是a.out。例子如下：   g++ -o hello.out hello.cppg++ -o hello.asm -S hello.cpp   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（2）目录选项</strong></p><pre class="line-numbers language-none"><code class="language-none">-I[dir]在你是用#include &quot;file&quot;的时候，gcc&#x2F;g++会先在当前目录查找你所指定的头文件，如果没有找到，会到系统默认的头文件目录找。如果使用-I指定了目录，编译器会先在指定的目录查找，然后再去系统默认头文件目录查找。对于#include &lt;file&gt;，gcc&#x2F;g++会到-I指定的目录查找，查找不到，然后再到系统默认的头文件目录查找。-include [file]相当于“#include”，用于包含某个代码,简单来说,就是编译某个文件,需要另一个文件的时候,就可以   用它设定,功能就相当于在代码中使用#include。例子用法:   gcc hello.c -include &#x2F;root&#x2F;pianopan.h   -I-就是取消前一个参数的功能,所以一般在-Idir之后使用   -idirafter [dir]   在-I的目录里面查找失败，将到目录dir里面查找。-iprefix [prefix]，-iwithprefix [dir]一般一起使用，当-I的目录查找失败，会到prefix+dir下查找。-L[dir]   编译的时候，指定搜索库的路径。比如你自己的库，可以用它指定目录，不然编译器将只在标准库的目录找。这个dir就是目录的名称。-l[library]    指定编译的时使用的库，例子用法   gcc -lcurses hello.c   使用curses库编译连接，生成程序。  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（3）预处理选项</strong></p><pre class="line-numbers language-none"><code class="language-none">-Dmacro相当于C语言中的#define macro-Dmacro&#x3D;defn定义宏，相当于C语言中的#define macro defn-Umacro取消宏定义，相当于C语言中的#undef macro-undef取消任何非标准宏的定义，C++标准预定义的宏仍然有效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（4）链接方式选项</strong></p><pre class="line-numbers language-none"><code class="language-none">-pedantic允许发出ANSI&#x2F;ISO C标准所列出的所有警告-pedantic-errors允许发出ANSI&#x2F;ISO C标准所列出的错误-Wall一般使用该选项，允许发出GCC能够提供的所有有用的警告。也可以用-W&#123;warning&#125;来标记指定的警告-Wno-deprecated使用C++标准废弃特性不告警-Werror要求GCC将所有的警告当成错误进行处理，在警告发生时中止编译过程。-Werror&#x3D;&#123;warning&#125;将指定警告设置为错误。例如-Werror&#x3D;return-type，如果函数需要返回值却没有return语句，则编译报错-w关闭所有警告,建议不要使用此项。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（5）错误与告警选项</strong></p><pre class="line-numbers language-none"><code class="language-none">-pedantic允许发出ANSI&#x2F;ISO C标准所列出的所有警告-pedantic-errors允许发出ANSI&#x2F;ISO C标准所列出的错误-Wall一般使用该选项，允许发出GCC能够提供的所有有用的警告。也可以用-W&#123;warning&#125;来标记指定的警告-Wno-deprecated使用C++标准废弃特性不告警-Werror要求GCC将所有的警告当成错误进行处理，在警告发生时中止编译过程。-Werror&#x3D;&#123;warning&#125;将指定警告设置为错误。例如-Werror&#x3D;return-type，如果函数需要返回值却没有return语句，则编译报错-w关闭所有警告,建议不要使用此项。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（6）调试选项</strong></p><pre class="line-numbers language-none"><code class="language-none"> -g   指示编译器，在编译时，产生调试信息。-gstabs   此选项以stabs格式生成调试信息,但不包括gdb调试信息。 -gstabs+   此选项以stabs格式声称调试信息,并且包含仅供gdb使用的额外调试信息.   -ggdb    此选项将尽可能的生成gdb可以使用的调试信息。-glevel请求生成调试信息，同时用level指出需要多少信息，默认的level值是2。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（7）优化选项</strong></p><pre class="line-numbers language-none"><code class="language-none">-O0   -O1   -O2   -O3   编译器优化选项分为4个级别，-O0表示没有优化，-O1为缺省值，建议使用-O2，-O3优化级别最高。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（8）其他选项</strong></p><pre class="line-numbers language-none"><code class="language-none">-fpic编译器生成位置无关目标码（PIC，position-independent code），用于动态链接库，即Linux下的.so文件。通过全局偏移表（GOT，Global Offset Table）访问所有常量地址。程序启动时通过动态加载程序解析GOT条目。如果链接的so文件的GOT大小超过计算机特定的最大大小，则会从链接器收到错误消息，指示-fpic不起作用。这种情况下，请使用-fPIC重新编译-fPIC同-fpic功能一致，生成位置无关目标码，用于生成动态链接库，建议使用该选项，而非-fpic-v显示详细的编译、汇编、连接命令-pipe使用管道代替编译过程中的临时文件,在使用非gnu汇编工具的时候,可能有些问题   g++ -pipe -o hello.out hello.cpp-ansi关闭gnu c中与ansi c不兼容的特性，激活ansi c的专有特性(包括禁止一些asm inline typeof关键字,以及UNIX,vax等预处理宏。-fno-asm   此选项实现ansi选项功能的一部分，它禁止将asm,inline和typeof用作关键字。   -fno-strict-prototype只对g++起作用,使用这个选项,g++将对不带参数的函数,都认为是没有显式的对参数的个数和类型说明,而不是没有参数.而gcc无论是否使用这个参数,都将对没有带参数的函数,认为没有显式说明的类型。-fthis-is-varialble   就是向传统c++看齐,可以使用this当一般变量使用。-fcond-mismatch   允许条件表达式的第二和第三参数类型不匹配,表达式的值将为void类型。-funsigned-char   -fno-signed-char   -fsigned-char   -fno-unsigned-char   这四个参数是对char类型进行设置,决定将char类型设置成unsigned char(前两个参数)或者signed char(后两个参数)。-fpermissive把代码的语法错误作为警告，并继续编译。请谨慎使用该选项。-imacros file   将file文件的宏,扩展到gcc&#x2F;g++的输入文件,宏定义本身并不出现在输入文件中     -nostdinc   使编译器不在系统缺省的头文件目录里面找头文件,一般和-I联合使用,明确限定头文件的位置。 -nostdin C++规定不在g++指定的标准路经中搜索,但仍在其他路径中搜索,此选项在创建libg++库使用。-C在预处理的时候,不删除注释信息,一般和-E使用,有时候分析程序，用这个很方便的。 -m生成与具体CPU相关的程序。-mtune&#x3D;cpu-type 为指定类型的CPU生成代码。cpu-type 可以是：i386，i486，i586，pentium，i686，pentium4 等等。-m32-m64生成32bits程序或64bits程序-mmmx-msse-msse2-mno-mmx-mno-sse-mno-sse2使用或者不使用MMX，SSE，SSE2指令。-M生成文件依赖的信息，包含目标文件所依赖的所有源文件。你可以用gcc -M hello.c来测试一下，很简单。   -MM   和上面的那个一样，但是它将忽略由#include造成的依赖关系。   -MD和-M相同，但是输出将导入到.d的文件里面。-MMD   和-MM相同，但是输出将导入到.d的文件里面。-Wa,option   此选项传递option给汇编程序；如果option中间有逗号,就将option分成多个选项，然后传递给会汇编程序。 -Wl.option   此选项传递option给连接程序;如果option中间有逗号,就将option分成多个选项,然后传递给会连接程序。-x language filename   设定文件所使用的语言,使后缀名无效,对以后的多个有效.也就是根据约定C语言的后缀名称是.c的，而C++的后缀名是.C或者.cpp。如果你很个性，决定你的C代码文件的后缀名是.pig，那你就要用这个参数,这个参数对他后面的文件名都起作用，除非到了下一个参数的使用。可以使用的参数有下面的这些：c,objective-c,c-header,c++,cpp-output,assembler,assembler-with-cpp。   看到英文，应该可以理解的。例子用法:   gcc -x c hello.pig-x none filename关掉上一个选项，也就是让gcc根据文件名后缀，自动识别文件类型，例子用法:   gcc -x c hello.pig -x none hello2.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-FAQ"><a href="#4-FAQ" class="headerlink" title="4.FAQ"></a>4.FAQ</h2><h3 id="4-1编译选项疑问"><a href="#4-1编译选项疑问" class="headerlink" title="4.1编译选项疑问"></a>4.1编译选项疑问</h3><h4 id="4-1-1-Wno-unknown-pragmas-和-Wno-format-pg"><a href="#4-1-1-Wno-unknown-pragmas-和-Wno-format-pg" class="headerlink" title="4.1.1-Wno-unknown-pragmas 和 - Wno-format -pg"></a>4.1.1-Wno-unknown-pragmas 和 - Wno-format -pg</h4><p><strong>-Wno-unknown-pragmas：</strong> 查了大量资料和官方的手册，我觉得这个应该是实验室的师兄写错了，貌似没有这个警告命令选项。官方手册中有如下两个设置警告的命令选项。</p><p><strong>（1）-Wunknown-pragmas</strong></p><pre class="line-numbers language-none"><code class="language-none">Warn when a #pragma directive is encountered that is not understood by GCC. If this command-line option is used, warnings are even issued for unknown pragmas in system header files. This is not the case if the warnings are only enabled by the ‘-Wall’ command-line option.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>遇到 GCC 无法识别的编译指导指令，发出警告。在使用了 - Wall 选项时，就不需要使用该命令选项了。</p><p><strong>（2）-Wno-pragmas</strong></p><pre class="line-numbers language-none"><code class="language-none">Do not warn about misuses of pragmas, such as incorrect parameters, invalidsyntax, or conflicts between pragmas. See also &#39;-Wunknown-pragmas&#39;.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>遇到 GCC 无法识别的编译指导指令，不发出警告。</p><p><strong>-pg 作用：</strong> 编译的过程中加入额外的代码， 供性能分析工具 gprof 剖析程序的耗时情况。</p><h3 id="4-2-链接注意事项"><a href="#4-2-链接注意事项" class="headerlink" title="4.2 链接注意事项"></a>4.2 链接注意事项</h3><h4 id="4-2-1-指定静态与动态的链接方式"><a href="#4-2-1-指定静态与动态的链接方式" class="headerlink" title="4.2.1 指定静态与动态的链接方式"></a>4.2.1 指定静态与动态的链接方式</h4><p> g++ 链接库时，默认优先链接动态链接库。静态库与动态库混合链接时，有如下两种方法：</p><p> （1）静态链接库使用绝对路径，动态链接库使用 - l。以 boost 库为例，如果我们要使用静态库则可书写如下：</p><pre class="line-numbers language-none"><code class="language-none">g++ main.cpp -pthread &#x2F;usr&#x2F;lib64&#x2F;libboost_thread.a &#x2F;usr&#x2F;lib64&#x2F;libboost_system.a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）使用<code>-Wl,-Bstatic</code>告诉链接器<code>ld</code>链接静态库，不存在静态库，则<code>ld</code>报错，只存在动态链接库也报错。使用<code>-Wl,-Bdynamic</code>告诉链接器<strong>优先</strong>使用动态链接库，如果只存在静态库，则链接静态库，不报错。示例如下：</p><pre class="line-numbers language-none"><code class="language-none">g++  main.cpp -Wl,-Bstatic -lboost_system -lboost_thread -Wl,-Bdynamic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：</strong> （1）命令末尾<code>-Wl,-Bdynamic</code>，作用是告诉链接器，后续系统库的链接默认使用动态链接，否则会出现找不到系统库的错误，诸如：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;bin&#x2F;ld: cannot find -lgcc_scollect2: ld returned 1 exit status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（2）链接时，库要放在目标文件的后面，否则会报 “undefined reference to: xxx” 错误。具体参见 gcc 手册的如下描述：</p><pre class="line-numbers language-none"><code class="language-none">the linker searches and processes libraries and object files in the order they are specified. Thus, &#96;foo.o -lz bar.o&#39; searches library &#96;z&#39; after file foo.o but before bar.o. If bar.o refers to functions in &#96;z&#39;, those functions may not be loaded.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1]<a href="http://blog.chinaunix.net/uid-25119314-id-224398.html">gcc及其选项详解</a></p><p>[2]<a href="https://gcc.gnu.org/onlinedocs/gcc-6.1.0/gcc.pdf">GCC官方手册</a> </p><p>[3]<a href="http://www.cnblogs.com/fengbeihong/p/3641384.html">gcc编译选项</a> </p><p>[4]<a href="http://blog.csdn.net/wangxvfeng101/article/details/15336955">gcc&#x2F;g++ 静态动态库混链接</a> </p><p>[5]<a href="http://blog.csdn.net/imilli/article/details/51454236">折腾gcc&#x2F;g++链接时.o文件及库的顺序问题</a> </p><p>[6]<a href="http://www.cnblogs.com/lidan/archive/2011/05/25/2239517.html">g++参数介绍</a> </p><p>[7]<a href="https://stackoverflow.com/questions/36353302/gcc-cannot-find-cc1plus?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa">gcc cannot find cc1plus</a></p><p> [8]<a href="https://blog.csdn.net/zxy_cs/article/details/6901737">GNU g++常用编译选项用法</a> </p><p>[9]<a href="https://blog.csdn.net/xiangguiwang/article/details/81939237">-fpic 与-fPIC的区别</a></p><p>原文：(<a href="https://cloud.tencent.com/developer/article/1394309">https://cloud.tencent.com/developer/article/1394309</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问题求解与程序设计（第2版）——鲍春波、林芳</title>
      <link href="/2022/09/20/%E9%97%AE%E9%A2%98%E6%B1%82%E8%A7%A3%E4%B8%8E%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89%E2%80%94%E2%80%94%E9%B2%8D%E6%98%A5%E6%B3%A2%E3%80%81%E6%9E%97%E8%8A%B3/"/>
      <url>/2022/09/20/%E9%97%AE%E9%A2%98%E6%B1%82%E8%A7%A3%E4%B8%8E%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89%E2%80%94%E2%80%94%E9%B2%8D%E6%98%A5%E6%B3%A2%E3%80%81%E6%9E%97%E8%8A%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="问题求解与程序设计（第2版）——鲍春波、林芳"><a href="#问题求解与程序设计（第2版）——鲍春波、林芳" class="headerlink" title="问题求解与程序设计（第2版）——鲍春波、林芳"></a>问题求解与程序设计（第2版）——鲍春波、林芳</h1><h2 id="第一章-计算机与程序设计"><a href="#第一章-计算机与程序设计" class="headerlink" title="第一章 计算机与程序设计"></a>第一章 计算机与程序设计</h2><h3 id="1-4-典型程序演示"><a href="#1-4-典型程序演示" class="headerlink" title="1.4 典型程序演示"></a>1.4 典型程序演示</h3><h4 id="程序清单1-1"><a href="#程序清单1-1" class="headerlink" title="程序清单1.1"></a>程序清单1.1</h4><blockquote><p>猜数游戏</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*Guess number game,guessnNumber.c*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span>   <span class="token comment">//for rand()</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;time.h></span>      <span class="token comment">//for time() </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;conio.h></span>     <span class="token comment">//for getch()   本行课本少写了，会报错，缺少getch函数的声明</span></span><span class="token comment">// function prototype</span><span class="token keyword">int</span> <span class="token function">makeMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//think a magic number</span><span class="token keyword">void</span> <span class="token function">guessNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> magic<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//guess</span><span class="token comment">//application entrance</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> a<span class="token punctuation">;</span><span class="token keyword">int</span> magic<span class="token punctuation">;</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//seed random number generator</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Welcome to GuessNumber Game\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span>magic<span class="token operator">=</span><span class="token function">makeMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//call makeMagic</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I have a magic number between 1 to 1000,please guess:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">guessNumber</span><span class="token punctuation">(</span>magic<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//call guessNumber</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Continue or no? Y/N\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token function">getch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//input a character for continue or no</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token char">'Y'</span><span class="token operator">||</span>a<span class="token operator">==</span><span class="token char">'y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// define makeMagic function</span><span class="token keyword">int</span> <span class="token function">makeMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> magicNumber<span class="token punctuation">;</span>magicNumber<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">1000</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> magicNumber<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token comment">// define guessNumber function</span><span class="token keyword">void</span> <span class="token function">guessNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> magic<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> guess<span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>guess<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>guess<span class="token operator">></span>magic<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Wrong,too high!try again!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>guess<span class="token operator">&lt;</span>magic<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Wrong,too low!try again!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>guess<span class="token operator">&lt;</span>magic<span class="token operator">||</span>guess<span class="token operator">></span>magic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Congratulation!you are right!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="第二章-数据类型与变量——程序设计入门"><a href="#第二章-数据类型与变量——程序设计入门" class="headerlink" title="第二章 数据类型与变量——程序设计入门"></a>第二章 数据类型与变量——程序设计入门</h2><h3 id="2-1-在屏幕上输出文字信息"><a href="#2-1-在屏幕上输出文字信息" class="headerlink" title="2.1 在屏幕上输出文字信息"></a>2.1 在屏幕上输出文字信息</h3><h4 id="程序清单2-1"><a href="#程序清单2-1" class="headerlink" title="程序清单2.1"></a>程序清单2.1</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** hello.c 在屏幕上显示信息*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span>  <span class="token comment">//printf需要的头文件 </span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>    <span class="token comment">//应用程序的入口 </span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello,Welcome to C/C++!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用printf，显示给定的信息</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 程序正常结束时返回0</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="程序清单2-2"><a href="#程序清单2-2" class="headerlink" title="程序清单2.2"></a>程序清单2.2</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**   hello.c:display Messages*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hi,How are you!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello\nWelcome to C/C++!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="表2-1-常用的转义序列"><a href="#表2-1-常用的转义序列" class="headerlink" title="表2.1 常用的转义序列"></a>表2.1 常用的转义序列</h4><table><thead><tr><th>转义序列</th><th>含义</th><th>转义序列</th><th>含义</th></tr></thead><tbody><tr><td><code>\n</code></td><td>换行（Newline）</td><td><code>\&#39;</code></td><td>输出序列号（Single Quotation Mark）</td></tr><tr><td><code>\\</code></td><td>水平制表（Horizontal Tabulation）</td><td><code>\?</code></td><td>输出问号（Question Mark）</td></tr><tr><td><code>\a</code></td><td>输出反斜杠（Backslash）</td><td><code>\r</code></td><td>输出回车符（Carriage Return）(不换行，光标定位当前行的开始位置)</td></tr><tr><td><code>\*</code></td><td>响铃符（Alert or Bell）</td><td><code>\b</code></td><td>退格（Backspace）</td></tr><tr><td><code>\&quot;</code></td><td>输出双引号（Double Quotation Mark）</td><td><code>\t</code></td><td>水平制表（Tab&#x3D;4个空格）</td></tr></tbody></table><hr><hr><h3 id="2-2计算两个固定整数的和与积"><a href="#2-2计算两个固定整数的和与积" class="headerlink" title="2.2计算两个固定整数的和与积"></a>2.2计算两个固定整数的和与积</h3><h4 id="程序清单2-3"><a href="#程序清单2-3" class="headerlink" title="程序清单2.3"></a>程序清单2.3</h4><blockquote><p>两个固定整数的和与积</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**  add2int1.c ：两个固定整数的和与积 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span> </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2+3=%d\n2*3=%d"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2+3和2*3的结果填入到格式说明中%d对应的位置</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="程序清单2-4"><a href="#程序清单2-4" class="headerlink" title="程序清单2.4"></a>程序清单2.4</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**add2int2.c 两个固定整数的和与积改进版 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span> </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> number1<span class="token punctuation">,</span>number2<span class="token punctuation">;</span>  <span class="token comment">//为存储整数声明几个整型变量 </span><span class="token keyword">int</span> sum<span class="token punctuation">,</span>product<span class="token punctuation">;</span>number1<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">//为变量赋值</span>number2<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>   sum<span class="token operator">=</span>number1<span class="token operator">+</span>number2<span class="token punctuation">;</span>  <span class="token comment">//两个整型变量中的值求和，结果放在整型变量sum中 </span>product<span class="token operator">=</span>number1<span class="token operator">*</span>number2<span class="token punctuation">;</span> <span class="token comment">//两个整型变量的值求积，结果放在变量product中 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d+%d=%d\n"</span><span class="token punctuation">,</span>number1<span class="token punctuation">,</span>number2<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//按照格式输出各个变量中的值 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d*%d=%d\n"</span><span class="token punctuation">,</span>number1<span class="token punctuation">,</span>number2<span class="token punctuation">,</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="程序清单2-5"><a href="#程序清单2-5" class="headerlink" title="程序清单2.5"></a>程序清单2.5</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**intalign:整数输出的宽度和对齐方式 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">556</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//整数的实际宽度输出</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span><span class="token number">232</span><span class="token punctuation">,</span><span class="token number">2233</span><span class="token punctuation">,</span><span class="token number">245</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%5d %5d %5d\n"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">33333</span><span class="token punctuation">,</span><span class="token number">556</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//规定了整数的宽度是5，不足五位的右对齐 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span><span class="token number">232</span><span class="token punctuation">,</span><span class="token number">33333</span><span class="token punctuation">,</span><span class="token number">245</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-5d %-5d %-5d\n"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">33333</span><span class="token punctuation">,</span><span class="token number">556</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//规定了整数的宽度是5，不足五位的左对齐 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-5d %-5d %-5d\n"</span><span class="token punctuation">,</span><span class="token number">232</span><span class="token punctuation">,</span><span class="token number">33333</span><span class="token punctuation">,</span><span class="token number">245</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="程序清单2-6"><a href="#程序清单2-6" class="headerlink" title="程序清单2.6"></a>程序清单2.6</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**   sizeoftype.c: 各种常用数据类型的变量 */</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Data type   Number of Bytes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"---------   ---------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"char        %d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"int         %d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned    %d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"short       %d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"long long   %d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"float       %d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"double      %d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-3计算任意两个整数的和与积"><a href="#2-3计算任意两个整数的和与积" class="headerlink" title="2.3计算任意两个整数的和与积"></a>2.3计算任意两个整数的和与积</h3><h4 id="程序清单2-7"><a href="#程序清单2-7" class="headerlink" title="程序清单2.7"></a>程序清单2.7</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**   add2int3.c :求两个任意整数的和与积 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> number1<span class="token punctuation">,</span>number2<span class="token punctuation">;</span>  <span class="token comment">//为存储整数声明几个整型变量 </span><span class="token keyword">int</span> sum<span class="token punctuation">,</span>product<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>number1<span class="token punctuation">,</span><span class="token operator">&amp;</span>number2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从标准输入读取数据 </span>sum <span class="token operator">=</span> number1 <span class="token operator">+</span> number2<span class="token punctuation">;</span>   <span class="token comment">//两个整型变量中的值求和，结果放在整型变量sum中 </span>product <span class="token operator">=</span> number1 <span class="token operator">*</span> number2<span class="token punctuation">;</span> <span class="token comment">//两个变量中的值求积，结果放在product中</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d\n"</span><span class="token punctuation">,</span>number1<span class="token punctuation">,</span>number2<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//按照格式输出各个变量中的值 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d * %d = %d\n"</span><span class="token punctuation">,</span>number1<span class="token punctuation">,</span>number2<span class="token punctuation">,</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="程序清单2-8"><a href="#程序清单2-8" class="headerlink" title="程序清单2.8"></a>程序清单2.8</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**   add2int4.c : 求任意多两个任意整数的和与积 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> number1<span class="token punctuation">,</span>number2<span class="token punctuation">;</span>  <span class="token comment">//为存储整数声明几个整形变量</span><span class="token keyword">int</span> sum<span class="token punctuation">,</span>product<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>number1<span class="token punctuation">,</span><span class="token operator">&amp;</span>number2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//按照规定的格式从标准输入读数据</span>sum <span class="token operator">=</span> number1 <span class="token operator">+</span> number2<span class="token punctuation">;</span> <span class="token comment">//两个变量中的值求和，结果放在整型变量sum中</span>product <span class="token operator">=</span> number1 <span class="token operator">*</span> number2<span class="token punctuation">;</span> <span class="token comment">//变量中的值求积，结果放在整型变量product中</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d+%d=%d\n"</span><span class="token punctuation">,</span>number1<span class="token punctuation">,</span>number2<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按照格式输出变量中的值 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d*%d=%d\n"</span><span class="token punctuation">,</span>number1<span class="token punctuation">,</span>number2<span class="token punctuation">,</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//无限循环，在运行时要结束这个无限循环必须通过CTRL-C强行中断 </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-4温度转换"><a href="#2-4温度转换" class="headerlink" title="2.4温度转换"></a>2.4温度转换</h3><h4 id="程序清单2-9"><a href="#程序清单2-9" class="headerlink" title="程序清单2.9"></a>程序清单2.9</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** fahr2celsius1.c : 华氏温度转化为摄氏温度* 在程序中给定一个华氏温度，用变量初始化确定一个华氏温度值* 使用计算公式：celsius=5*(fahr-32)/9计算摄氏温度 */</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> fahr<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//初始化 </span><span class="token keyword">int</span> celsius<span class="token punctuation">;</span>  <span class="token comment">//未初始化</span>celsius <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token punctuation">(</span>fahr<span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">9</span><span class="token punctuation">;</span> <span class="token comment">//计算结果赋给celsius</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>celsius<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出结果</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="程序清单2-10"><a href="#程序清单2-10" class="headerlink" title="程序清单2.10"></a>程序清单2.10</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**  fahr2celsius2.c: 华氏温度转换为摄氏温度*  键盘输入华氏温度，使用计算公式celsius = 5 *(fahr-32)/9计算摄氏温度 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> fahr<span class="token punctuation">;</span>  <span class="token comment">//变量声明</span><span class="token keyword">int</span> celsius<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>fahr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输入一个华氏温度</span>celsius <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token punctuation">(</span>fahr<span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">9</span><span class="token punctuation">;</span> <span class="token comment">//计算对应的摄氏温度</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>celsius<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出 </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="程序清单2-11"><a href="#程序清单2-11" class="headerlink" title="程序清单2.11"></a>程序清单2.11</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** fahr2celsius3.c:* 对fahr=0、20...300使用公式celsius = 5*(fahr-32)/9* 分别计算对应的摄氏温度值，打印出华氏温度与摄氏温度对照表 */</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> fahr<span class="token punctuation">,</span>celsius<span class="token punctuation">;</span><span class="token keyword">int</span> lower<span class="token punctuation">,</span>upper<span class="token punctuation">,</span>step<span class="token punctuation">;</span><span class="token comment">//初始化</span>    lower<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//温度表的下限 </span>    upper<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">;</span> <span class="token comment">//温度表的上限 </span>    step<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">//步长 </span>fahr<span class="token operator">=</span>lower<span class="token punctuation">;</span> <span class="token comment">//华氏温度从0开始</span><span class="token keyword">while</span><span class="token punctuation">(</span>fahr<span class="token operator">&lt;=</span>upper<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//这里fahr&lt;=upper是一个重复的条件</span> celsius <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">*</span><span class="token punctuation">(</span>fahr<span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">9</span><span class="token punctuation">;</span> <span class="token comment">//对不同的fahr进行计算celsius的值</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t%d\n"</span><span class="token punctuation">,</span>fahr<span class="token punctuation">,</span>celsius<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//按照格式打印华氏与摄氏的温度值</span> fahr<span class="token operator">=</span>fahr<span class="token operator">+</span>step<span class="token punctuation">;</span>  <span class="token comment">//fahr增加一个步长 </span><span class="token punctuation">&#125;</span> <span class="token comment">//对增加的步长进一步回到while，判断重复的条件是否真实</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="2-4-2运算的优先级和结合性"><a href="#2-4-2运算的优先级和结合性" class="headerlink" title="2.4.2运算的优先级和结合性"></a>2.4.2运算的优先级和结合性</h4><blockquote><p>如果在一个表达式中有两个以上同一级别的双目算术运算，则从左向右依次进行，在C&#x2F;C++语言中称这种特性为结合性</p><p>因此可以说<strong>双目算术运算是左结合的</strong>，而<strong>单目的取正和取负运算以及赋值运算则是右结合的</strong></p></blockquote><hr><h4 id="表2-2运算的优先级和结合性（优先级从高到低）"><a href="#表2-2运算的优先级和结合性（优先级从高到低）" class="headerlink" title="表2.2运算的优先级和结合性（优先级从高到低）"></a>表2.2运算的优先级和结合性（优先级从高到低）</h4><hr><table><thead><tr><th>运算符</th><th>含义</th><th>结合性</th></tr></thead><tbody><tr><td>（）</td><td>括号</td><td>-</td></tr><tr><td>+，-</td><td>单目运算，取正、负</td><td>从右向左</td></tr><tr><td>*，&#x2F;，%</td><td>双目运算，乘、除、求余</td><td>从左向右</td></tr><tr><td>+，-</td><td>双目运算，加、减</td><td>从左向右</td></tr><tr><td>&#x3D;</td><td>双目运算，赋值</td><td>从右向左</td></tr></tbody></table><hr><h3 id="2-5求两个整数的平均值"><a href="#2-5求两个整数的平均值" class="headerlink" title="2.5求两个整数的平均值"></a>2.5求两个整数的平均值</h3><h4 id="程序清单2-12"><a href="#程序清单2-12" class="headerlink" title="程序清单2.12"></a>程序清单2.12</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** intAverage.c: 求两个整数的平均值，结果仍为整数 */</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> number1<span class="token punctuation">;</span>  <span class="token comment">//声明存放第一个加数的变量 </span><span class="token keyword">int</span> number2<span class="token punctuation">;</span>  <span class="token comment">//声明存放第二个加数的变量 </span><span class="token keyword">int</span> average<span class="token punctuation">;</span>  <span class="token comment">//声明存放整数平均值的变量 </span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>number1<span class="token punctuation">,</span><span class="token operator">&amp;</span>number2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//从标准输入读取数据 </span>average<span class="token operator">=</span><span class="token punctuation">(</span>number1<span class="token operator">+</span>number2<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">//计算平均值 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>average<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出结果 </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="程序清单2-13"><a href="#程序清单2-13" class="headerlink" title="程序清单2.13"></a>程序清单2.13</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* * floatAverage.c：求两个整数的平均值，结果为实数 * 默认的精度，精确到6位小数*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span>  number1<span class="token punctuation">;</span>      <span class="token comment">//存放第一个加数的变量</span><span class="token keyword">int</span>  number2<span class="token punctuation">;</span>      <span class="token comment">//存放第二个加数的变量</span><span class="token keyword">float</span>  average<span class="token punctuation">;</span>      <span class="token comment">//存放整数平均值</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>number1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>number2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从标准输入读数据</span>    average <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>number1 <span class="token operator">+</span> number2<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//把整型数显示转换为浮点型计算平均值</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span>average<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按默认的精度输出，精确到6位小数</span>    <span class="token comment">//average =(number1 + number2)/2.0; //把整型数2显示转换为浮点型2.0, 计算平均值</span>    <span class="token comment">//printf("%f\n",average);//按默认的精度输出，精确到6位小数</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="程序清单2-14"><a href="#程序清单2-14" class="headerlink" title="程序清单2.14"></a>程序清单2.14</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* * floatAverage2.c：求两个整数的平均值,结果为实数，精确到1位小数*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span>  number1<span class="token punctuation">;</span>      <span class="token comment">//定义整型加数1</span><span class="token keyword">int</span>  number2<span class="token punctuation">;</span>      <span class="token comment">//定义整型加数2</span><span class="token keyword">float</span> average<span class="token punctuation">;</span>     <span class="token comment">//定义实数平均值,浮点型/单精度</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>number1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>number2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从标准输入读数据</span>    average <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>number1 <span class="token operator">+</span> number2<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//把整型数显示转换为浮点型，再计算平均值</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1f\n"</span><span class="token punctuation">,</span>average<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出浮点型平均值，精确到1位小数</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="表2-3浮点型数据的IEEE标准"><a href="#表2-3浮点型数据的IEEE标准" class="headerlink" title="表2.3浮点型数据的IEEE标准"></a>表2.3浮点型数据的IEEE标准</h4><blockquote><p>IEEE 754是IEEE二进制浮点数算术标准（ANSI&#x2F;IEEE Std.754-1985），又称IEC 60559:1989，它是20世纪80年代以来最广泛使用的浮点数运算标准，为许多CPU与浮点预算器所采用，该标准的主要贡献者是美国伯克利大学的Kahan教授，1989年的ACM图灵奖得主</p><blockquote><p>IEEE   :   Institute of Electrical and Electronics Engineers </p></blockquote></blockquote><hr><table><thead><tr><th>类型</th><th>内存字节数</th><th>最小正值</th><th>最大正值</th><th>精度</th></tr></thead><tbody><tr><td>float</td><td>4</td><td>1.17×10^-38^</td><td>3.40×10^38^</td><td>6~8位有效数字</td></tr><tr><td>double</td><td>8</td><td>2.22×10^-308^</td><td>1.79×10^308^</td><td>6~17位有效数字</td></tr></tbody></table><hr><h4 id="程序清单2-15"><a href="#程序清单2-15" class="headerlink" title="程序清单2.15"></a>程序清单2.15</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** floatPrecision.c: 浮点数的精度*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">float</span> x<span class="token punctuation">;</span>    <span class="token keyword">double</span> y<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the default precision:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> <span class="token number">0.1234567292012</span><span class="token punctuation">;</span>       <span class="token comment">//小数位数大于6位</span>    y <span class="token operator">=</span> <span class="token number">0.1234567890123456939</span><span class="token punctuation">;</span> <span class="token comment">//小数位数大于16位</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %f        %f\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//单精度到小数6位，双精度小数也是6位</span>    x <span class="token operator">=</span> <span class="token number">1234.1234567292012</span><span class="token punctuation">;</span>       <span class="token comment">//整数若干位，小数若干位</span>    y <span class="token operator">=</span> <span class="token number">1234.1234567890123456939</span><span class="token punctuation">;</span> <span class="token comment">//整数若干位，小数若干位</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %f        %f\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//单精度：整数加小数有效数字8位，双精度最多16位，小数最多6位</span>    x <span class="token operator">=</span> <span class="token number">12345678.7234567292012</span><span class="token punctuation">;</span>         <span class="token comment">//</span>    y <span class="token operator">=</span> <span class="token number">1234567890123456789.233674755435</span><span class="token punctuation">;</span>    <span class="token comment">//scanf("%f%lf",&amp;x, &amp;y);   //也可以键盘输入</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %f        %f\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//默认最高输出精度：float8位，double17位</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the customized width and precision:\n "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> <span class="token number">0.1234567292012</span><span class="token punctuation">;</span>       <span class="token comment">//小数位数大于6位</span>    y <span class="token operator">=</span> <span class="token number">0.123456789012345678939</span><span class="token punctuation">;</span> <span class="token comment">//小数位数大于17位</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%11.9f     %20.18f\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//指定输出精度，但单精度的最多8位有效，双精度最多17位有效</span>    x <span class="token operator">=</span> <span class="token number">12345678.7234567292012</span><span class="token punctuation">;</span>         <span class="token comment">//</span>    y <span class="token operator">=</span> <span class="token number">1234567890123.233674755435</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%11.9f     %20.18f\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//指定输出精度，但单精度的最多8位有效，双精度最多17位有效</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="程序清单2-16"><a href="#程序清单2-16" class="headerlink" title="程序清单2.16"></a>程序清单2.16</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** floaterr1.c: 舍入误差*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">float</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>     a <span class="token operator">=</span> <span class="token number">12345678900</span><span class="token punctuation">;</span>     b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">200</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%f\n         +200\nb=%f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>     b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1000</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\na=%f\n        +1000\nb=%f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>     b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">2000</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\na=%f\n        +2000\nb=%f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>     b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">4000</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\na=%f\n        +4000\nb=%f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>     b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">40000</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\na=%f\n       +40000\nb=%f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>     a <span class="token operator">=</span> <span class="token number">1234567.125</span><span class="token punctuation">;</span>     b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">234.796</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\na=%f\n     +234.796\nb=%f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="程序清单2-17"><a href="#程序清单2-17" class="headerlink" title="程序清单2.17"></a>程序清单2.17</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** floaterr2.c: 浮点数的溢出*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">float</span> toobig<span class="token operator">=</span><span class="token number">3.4E38</span><span class="token operator">*</span><span class="token number">100.0f</span><span class="token punctuation">;</span><span class="token comment">//3.4E38是最大的单精度数</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span> toobig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//扩大100倍后向上溢出</span>    <span class="token keyword">float</span> x<span class="token operator">=</span><span class="token number">0.123456</span><span class="token punctuation">;</span>          <span class="token comment">//6位有效数字</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span>x<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//再缩小100倍向下溢出</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="程序清单2-18"><a href="#程序清单2-18" class="headerlink" title="程序清单2.18"></a>程序清单2.18</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* * typeconvers.c : 算术运算类型转换和赋值运算类型转换 *                   输出时不能转换 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> x<span class="token operator">=</span><span class="token number">100.0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f  %d\n"</span><span class="token punctuation">,</span> k<span class="token operator">+</span>x<span class="token punctuation">,</span> k<span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//k提升为double型与x相加，但x不能降低为int</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d  %f\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//k依然是整型变量，它仅仅是在k+x时临时提升</span>    <span class="token keyword">float</span> y <span class="token operator">=</span> <span class="token number">5.6</span><span class="token punctuation">;</span>    k <span class="token operator">=</span> y<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> y<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d  %f\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-6计算圆的周长和面积"><a href="#2-6计算圆的周长和面积" class="headerlink" title="2.6计算圆的周长和面积"></a>2.6计算圆的周长和面积</h3><h4 id="程序清单2-19"><a href="#程序清单2-19" class="headerlink" title="程序清单2.19"></a>程序清单2.19</h4><blockquote><p>define宏定义用法</p></blockquote><hr><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;** areacircle.c: 计算圆的周长和面积*&#x2F;#include&lt;stdio.h&gt;#define  PI  3.141593int main(void)&#123;    int r;    double circ,area;    scanf(&quot;%d&quot;,&amp;r);    circ &#x3D; 2*PI*r;    area &#x3D; PI*r*r;    printf(&quot;PI:%f\n&quot;, PI );    printf(&quot;circumference &#x3D; %f\n&quot;, circ );    printf(&quot;area &#x3D; %f\n&quot;, area );    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="带参数的宏"><a href="#带参数的宏" class="headerlink" title="带参数的宏"></a>带参数的宏</h4><ul><li>除了一个常量可以定义一个宏代替外，一个表达式也可以定义一个带参数的宏替代。带有参数的宏定义形式如下</li></ul><blockquote><p>#define    宏名字（宏参数列表）    含有参数的宏替换表达式</p></blockquote><hr><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** macro.c  : 带参数的宏*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SQUARE</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">SQUARE</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><blockquote><p>注意，在宏定义中，必须把参数括起来，还要把整个替换表达式括起来，不然宏替换的结果就会出错。</p></blockquote><hr><h2 id="第三章-判断与决策——选择程序设计"><a href="#第三章-判断与决策——选择程序设计" class="headerlink" title="第三章 判断与决策——选择程序设计"></a>第三章 判断与决策——选择程序设计</h2><h3 id="3-1让成绩合格的学生通过"><a href="#3-1让成绩合格的学生通过" class="headerlink" title="3.1让成绩合格的学生通过"></a>3.1让成绩合格的学生通过</h3><h4 id="程序清单3-1"><a href="#程序清单3-1" class="headerlink" title="程序清单3.1"></a>程序清单3.1</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** stupassed.c:判断学生成绩是否通过*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> grade<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>grade<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>grade <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Good! You passed!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="表3-1运算的优先级和结合性（优先级从高到低）"><a href="#表3-1运算的优先级和结合性（优先级从高到低）" class="headerlink" title="表3.1运算的优先级和结合性（优先级从高到低）"></a>表3.1运算的优先级和结合性（优先级从高到低）</h4><table><thead><tr><th>运算符</th><th>含义</th><th>结合性</th></tr></thead><tbody><tr><td>（）</td><td>括号</td><td>最近的括号配对</td></tr><tr><td>+，-</td><td>单目运算，取正、负</td><td>从右向左</td></tr><tr><td>*，&#x2F;，%</td><td>双目运算，乘、除、求余</td><td>从左向右</td></tr><tr><td>+，-</td><td>双目运算，加、减</td><td>从左向右</td></tr><tr><td>&gt;,&lt;,&gt;&#x3D;,&lt;&#x3D;</td><td>双目运算，比较大小</td><td>从左向右</td></tr><tr><td>&#x3D;&#x3D;,!&#x3D;</td><td>双目运算，判断是否相等</td><td>从左向右</td></tr><tr><td>&#x3D;</td><td>双目运算，赋值</td><td>从右向左</td></tr></tbody></table><hr><h4 id="程序清单3-2"><a href="#程序清单3-2" class="headerlink" title="程序清单3.2"></a>程序清单3.2</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** compare2numbers.c:比较两个数*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token operator">></span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token operator">>=</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token operator">&lt;=</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token operator">!=</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="程序清单3-3"><a href="#程序清单3-3" class="headerlink" title="程序清单3.3"></a>程序清单3.3</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** logicAssign.c:两个数的比较结果暂存到一个逻辑变量中或者整型变量中*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token comment">//#include&lt;stdbool.h></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>    <span class="token comment">//int status;</span>    <span class="token comment">//_Bool status;</span>    bool status<span class="token punctuation">;</span>    status<span class="token operator">=</span>a<span class="token operator">></span>b<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    status<span class="token operator">=</span>a<span class="token operator">>=</span>b<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    status<span class="token operator">=</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    status<span class="token operator">=</span>a<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    status<span class="token operator">=</span>a<span class="token operator">==</span>b<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    status<span class="token operator">=</span>a<span class="token operator">!=</span>b<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="程序清单3-4"><a href="#程序清单3-4" class="headerlink" title="程序清单3.4"></a>程序清单3.4</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** compare2numbers2.c:比较两个数*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d>%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">>=</span>b<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d>=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d&lt;%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;=</span>b<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d&lt;=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d==%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">!=</span>b<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d!=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="程序清单3-5"><a href="#程序清单3-5" class="headerlink" title="程序清单3.5"></a>程序清单3.5</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** realCompare.c: 实数比较大小*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">float</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    a<span class="token operator">=</span><span class="token number">3.1</span><span class="token punctuation">;</span>    b<span class="token operator">=</span><span class="token number">3.099999991397669</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%11.9f  %11.9f\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f  %f\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a>b\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a&lt;b\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a==b\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    x<span class="token operator">=</span><span class="token number">3.1</span><span class="token punctuation">;</span>    y<span class="token operator">=</span><span class="token number">3.099999991397669</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%20.18f  %20.18f\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f  %f\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>y<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x>y\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span>y<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x&lt;y\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x==y\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="程序清单3-6"><a href="#程序清单3-6" class="headerlink" title="程序清单3.6"></a>程序清单3.6</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** realCompare2.c: 判断给定的PI值是否符合精度*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span>yourPi<span class="token punctuation">;</span>    <span class="token keyword">double</span> pi<span class="token operator">=</span><span class="token number">3.1415926</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I have a precision now,pls input your PI value:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>yourPi<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//输入一个pi值</span>    <span class="token keyword">double</span> err<span class="token operator">=</span><span class="token function">fabs</span><span class="token punctuation">(</span>pi<span class="token operator">-</span>yourPi<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//计算误差</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fabs(pi-yourPi)=%10.8f\n"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印误差</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token operator">&lt;=</span>eps<span class="token punctuation">)</span> <span class="token comment">//符合精度</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%10.8f = %10.8f according to the precision %10.8f\n"</span><span class="token punctuation">,</span>pi<span class="token punctuation">,</span>yourPi<span class="token punctuation">,</span>eps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"yourPi %10.8f is met the precision %10.8f\n"</span><span class="token punctuation">,</span>yourPi<span class="token punctuation">,</span>eps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>pi<span class="token operator">-</span>yourPi<span class="token punctuation">)</span><span class="token operator">></span>eps<span class="token punctuation">)</span> <span class="token comment">//没有达到精度</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"yourPi %10.8f is not met the precision eps %10.8f\n"</span><span class="token punctuation">,</span>yourPi<span class="token punctuation">,</span>eps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-2按成绩把学生分成两组"><a href="#3-2按成绩把学生分成两组" class="headerlink" title="3.2按成绩把学生分成两组"></a>3.2按成绩把学生分成两组</h3><p>P70</p>]]></content>
      
      
      <categories>
          
          <category> 大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散数学笔记Discrete Mathematics</title>
      <link href="/2022/09/14/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics/"/>
      <url>/2022/09/14/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="离散数学笔记"><a href="#离散数学笔记" class="headerlink" title="离散数学笔记"></a>离散数学笔记</h1><h1 id="Discrete-Mathematics"><a href="#Discrete-Mathematics" class="headerlink" title="Discrete Mathematics"></a>Discrete Mathematics</h1><blockquote><ul><li>—————————————————————————————–<em><strong>Design By 2100301629王家寧</strong></em></li></ul></blockquote><h2 id="第一章-集合"><a href="#第一章-集合" class="headerlink" title="第一章  集合"></a>第一章  集合</h2><h3 id="1-集合的运算"><a href="#1-集合的运算" class="headerlink" title="1.集合的运算"></a>1.集合的运算</h3><h4 id="①补运算"><a href="#①补运算" class="headerlink" title="①补运算"></a>①补运算</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171039284.png" alt="image-20220910170624452"></p><hr><h4 id="②对称差运算"><a href="#②对称差运算" class="headerlink" title="②对称差运算"></a>②对称差运算</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171039973.png" alt="image-20220910170918358"></p><h3 id="2-集合运算的性质"><a href="#2-集合运算的性质" class="headerlink" title="2.集合运算的性质"></a>2.集合运算的性质</h3><h4 id="①集合运算的基本恒等式"><a href="#①集合运算的基本恒等式" class="headerlink" title="①集合运算的基本恒等式"></a>①集合运算的基本恒等式</h4><blockquote><p> （可用文氏图进行相关推导）</p></blockquote><blockquote><p>重点记忆德摩根律和补交转换律    ⑩和⑪</p><p>德摩根律：补集分配进括号里面就把括号里面的交并符号反过来</p><p>补交转换律：交补连着写可以换成差</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171040097.png" alt="image-20220910171146929"></p><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171040726.png" alt="image-20220910171231566"></p><hr><blockquote><p>在证明题中，可以使用假设X来进行代入来证明，也可以通过举反例来列出具体的实例来推翻命题</p></blockquote><hr><h4 id="②容斥原理"><a href="#②容斥原理" class="headerlink" title="②容斥原理"></a>②容斥原理</h4><blockquote><p>容斥原理由来：将相容重的集合部分在计算并集集合的基数的时候进行排斥出去，故称容斥原理</p></blockquote><blockquote><p>基数：集合中元素的个数</p></blockquote><hr><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171040124.png" alt="image-20220910172705888"></p><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171040623.png" alt="image-20220910172720139"></p><hr><h2 id="第二章-关系"><a href="#第二章-关系" class="headerlink" title="第二章  关系"></a>第二章  关系</h2><h3 id="1-序偶与笛卡尔积"><a href="#1-序偶与笛卡尔积" class="headerlink" title="1.序偶与笛卡尔积"></a>1.序偶与笛卡尔积</h3><ul><li>序偶中有几个元素就叫做几元序偶</li></ul><blockquote><p>笛卡尔积的定义</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171040048.png" alt="image-20220910175717172"></p><hr><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171040138.png" alt="image-20220910175920205"></p><hr><blockquote><p>笛卡尔积的性质</p></blockquote><ul><li>笛卡尔积不满足交换律和结合律，但是对交和并都满足分配律</li><li><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171040783.png" alt="image-20220910180104785"></li></ul><hr><h3 id="2-关系的定义"><a href="#2-关系的定义" class="headerlink" title="2.关系的定义"></a>2.关系的定义</h3><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171040426.png" alt="image-20220910180803730"></p><hr><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171040844.png" alt="image-20220910180943298"></p><hr><blockquote><p>几种特殊的关系：空关系、全域关系、恒等关系</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171041441.png" alt="image-20220910181345614"></p><hr><blockquote><p>　　关系的定义域和值域</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171041943.png" alt="image-20220910181556855"></p><hr><h3 id="3-关系的表示"><a href="#3-关系的表示" class="headerlink" title="3.关系的表示"></a>3.关系的表示</h3><ul><li>关系图通过有向弧的方式表示</li></ul><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171041251.png" alt="image-20220910182139372"></p><hr><ul><li><p>关系矩阵表示法</p><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171041859.png" alt="image-20220910182301689"></p></li></ul><hr><h3 id="4-关系的性质"><a href="#4-关系的性质" class="headerlink" title="4.关系的性质"></a>4.关系的性质</h3><h4 id="①自反性与反自反性"><a href="#①自反性与反自反性" class="headerlink" title="①自反性与反自反性"></a>①自反性与反自反性</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171041851.png" alt="image-20220910182521132"></p><hr><h4 id="②对称性与反对称性"><a href="#②对称性与反对称性" class="headerlink" title="②对称性与反对称性"></a>②对称性与反对称性</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171041106.png" alt="image-20220910182718110"></p><hr><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171041739.png" alt="image-20220910183142174"></p><hr><blockquote><p>对称性和反对称性并非对立关系</p></blockquote><h4 id="③传递性"><a href="#③传递性" class="headerlink" title="③传递性"></a>③传递性</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171041205.png" alt="image-20220910183304642"></p><h4 id="关系性质的判别"><a href="#关系性质的判别" class="headerlink" title="关系性质的判别"></a>关系性质的判别</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171041720.png" alt="image-20220910183733500"></p><h3 id="5-关系的基本运算"><a href="#5-关系的基本运算" class="headerlink" title="5.关系的基本运算"></a>5.关系的基本运算</h3><blockquote><p>关系是一种特殊的集合，因此集合的基本运算对关系也同样适用</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171041301.png" alt="image-20220910184126024"></p><hr><h3 id="6-关系的复合运算"><a href="#6-关系的复合运算" class="headerlink" title="6.关系的复合运算"></a>6.关系的复合运算</h3><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171041369.png" alt="image-20220910184450743"></p><hr><blockquote><p>复合关系的关系矩阵</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171041255.png" alt="image-20220910184834326"></p><hr><ul><li>矩阵相乘是将&#x3D;&#x3D;前矩阵&#x3D;&#x3D;的<strong>第一行</strong>分别和&#x3D;&#x3D;后矩阵&#x3D;&#x3D;的<strong>各列</strong>进行<strong>相乘并相加</strong>得到&#x3D;&#x3D;新矩阵&#x3D;&#x3D;的&#x3D;&#x3D;第一行元素&#x3D;&#x3D;</li><li>这里改为<strong>布尔与</strong>和<strong>布尔或</strong>运算是因为，有时运算结果是2或者更多，但是&#x3D;&#x3D;实际上是一个序偶&#x3D;&#x3D;，所以结果为一</li></ul><hr><blockquote><p>复合运算满足&#x3D;&#x3D;并运算&#x3D;&#x3D;的分配律，但是不满足&#x3D;&#x3D;交运算&#x3D;&#x3D;的分配律</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171041891.png" alt="image-20220910185732002"></p><hr><h3 id="7-关系的逆运算"><a href="#7-关系的逆运算" class="headerlink" title="7.关系的逆运算"></a>7.关系的逆运算</h3><ul><li>将元素对调，矩阵转置即为关系的逆运算</li></ul><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171041607.png" alt="image-20220910190625694"></p><hr><blockquote><p>逆运算的性质</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171041289.png" alt="image-20220910190737561"></p><hr><h3 id="8-关系的幂运算"><a href="#8-关系的幂运算" class="headerlink" title="8.关系的幂运算"></a>8.关系的幂运算</h3><blockquote><p> R的零次幂就是A上的恒等关系</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171041411.png" alt="image-20220910190956658"></p><hr><blockquote><p>关系的幂运算的关系矩阵示例</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171041919.png" alt="image-20220910191152186"></p><hr><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171041033.png" alt="image-20220910191305441"></p><hr><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171041699.png" alt="image-20220910191320858"></p><hr><blockquote><p>幂运算的性质：简言之，有限集A上的关系R的幂序列R的0~n次幂是一个周期变化的序列（n无穷大）</p><p>也就是&#x3D;&#x3D;鸽巢原理&#x3D;&#x3D;：<strong>如果有n+1个鸽子飞进了n个鸽巢中，那么必定有鸽巢中至少飞进了2只鸽子。</strong></p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171042460.png" alt="image-20220910191541561"></p><hr><h3 id="9-关系的闭包运算"><a href="#9-关系的闭包运算" class="headerlink" title="9.关系的闭包运算"></a>9.关系的闭包运算</h3><blockquote><p>三种闭包运算也即添加最少序偶元素来让序偶集合符合自反、对称、传递关系的运算</p><p>自反闭包  r(R)</p><p>对称闭包  s(R)</p><p>传递闭包  t(R)</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171042084.png" alt="image-20220910222459190"></p><hr><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171042884.png" alt="image-20220910222530404"></p><hr><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171042180.png" alt="image-20220910222551227"></p><hr><ul><li>闭包运算的性质</li></ul><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171042279.png" alt="image-20220910223058068"></p><h3 id="10-等价关系"><a href="#10-等价关系" class="headerlink" title="10.等价关系"></a>10.等价关系</h3><h4 id="①等价关系的定义"><a href="#①等价关系的定义" class="headerlink" title="①等价关系的定义"></a>①等价关系的定义</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171042634.png" alt="image-20220910223346216"></p><blockquote><p>满足自反、对称、传递的关系即为等价关系</p></blockquote><hr><h4 id="②等价类的定义"><a href="#②等价类的定义" class="headerlink" title="②等价类的定义"></a>②等价类的定义</h4><blockquote><p>等价类后面的括号里包括自身</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171042843.png" alt="image-20220910224143000"></p><hr><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171042704.png" alt="image-20220910224218373"></p><hr><h3 id="11-商集"><a href="#11-商集" class="headerlink" title="11.商集"></a>11.商集</h3><h4 id="①商集的定义"><a href="#①商集的定义" class="headerlink" title="①商集的定义"></a>①商集的定义</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171042921.png" alt="image-20220910224750331"></p><blockquote><p>特别的可以记一下A关于&#x3D;&#x3D;恒等关系&#x3D;&#x3D;还有&#x3D;&#x3D;全域关系&#x3D;&#x3D;的商集</p></blockquote><ul><li>&#x3D;&#x3D;不要记错商集是共有的后边的元素而不是等价类&#x3D;&#x3D;<ul><li>&#x3D;&#x3D;也就是满足特定关系的各个划分的集合共同组成一个新的集合&#x3D;&#x3D;</li></ul></li></ul><h4 id="②划分的定义"><a href="#②划分的定义" class="headerlink" title="②划分的定义"></a>②划分的定义</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171042359.png" alt="image-20220910225333427"></p><blockquote><p>特别的，一一对应的商集和划分，对应某等价关系的商集所形成的划分，叫做由该等价关系导出的&#x3D;&#x3D;等价划分&#x3D;&#x3D;</p></blockquote><blockquote><p>由某划分确定的等价关系，称为由该&#x3D;&#x3D;划分所导出的等价关系&#x3D;&#x3D;</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171042680.png" alt="image-20220910225941529"></p><hr><blockquote><h6 id="通过划分求对应的等价关系"><a href="#通过划分求对应的等价关系" class="headerlink" title="通过划分求对应的等价关系"></a>通过划分求对应的等价关系</h6></blockquote><ul><li><strong>通过划分的各个集合求笛卡尔积之后再求并集，所得结果即为所求等价关系</strong></li></ul><blockquote><h6 id="通过等价关系求对应划分"><a href="#通过等价关系求对应划分" class="headerlink" title="通过等价关系求对应划分"></a>通过等价关系求对应划分</h6></blockquote><ul><li><strong>通过等价类导出对应的商集，所得商集即为所求等价划分</strong></li></ul><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171042557.png" alt="image-20220910230253536"></p><hr><h3 id="12-偏序关系"><a href="#12-偏序关系" class="headerlink" title="12.偏序关系"></a>12.偏序关系</h3><h4 id="①偏序关系的定义"><a href="#①偏序关系的定义" class="headerlink" title="①偏序关系的定义"></a>①偏序关系的定义</h4><blockquote><p>自反的、反对称的、传递的。</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171042639.png" alt="image-20220910230926778"></p><hr><h4 id="可比与盖住的定义"><a href="#可比与盖住的定义" class="headerlink" title="可比与盖住的定义"></a>可比与盖住的定义</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171042855.png" alt="image-20220910231511841"></p><hr><blockquote><p>X、Y符合关系则为可比的</p><p>不存在中间元素，则为盖住</p></blockquote><hr><h3 id="13-哈斯图和特殊关系"><a href="#13-哈斯图和特殊关系" class="headerlink" title="13.哈斯图和特殊关系"></a>13.哈斯图和特殊关系</h3><h4 id="①哈斯图的定义以及绘制步骤"><a href="#①哈斯图的定义以及绘制步骤" class="headerlink" title="①哈斯图的定义以及绘制步骤"></a>①哈斯图的定义以及绘制步骤</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171042692.png" alt="image-20220911013621530"></p><hr><h4 id="②特殊元素"><a href="#②特殊元素" class="headerlink" title="②特殊元素"></a>②特殊元素</h4><blockquote><h5 id="最大元和最小元"><a href="#最大元和最小元" class="headerlink" title="最大元和最小元"></a>最大元和最小元</h5></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171043284.png" alt="image-20220911013853527"></p><hr><blockquote><h5 id="极大元与极小元"><a href="#极大元与极小元" class="headerlink" title="极大元与极小元"></a>极大元与极小元</h5></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171043662.png" alt="image-20220911013933027"></p><hr><blockquote><h6 id="总结与分辨"><a href="#总结与分辨" class="headerlink" title="总结与分辨"></a>总结与分辨</h6></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171043897.png" alt="image-20220911014029331"></p><hr><blockquote><h5 id="上界与下界"><a href="#上界与下界" class="headerlink" title="上界与下界"></a>上界与下界</h5></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171043085.png" alt="image-20220911014210853"></p><hr><blockquote><h5 id="上确界与下确界"><a href="#上确界与下确界" class="headerlink" title="上确界与下确界"></a>上确界与下确界</h5></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171043274.png" alt="image-20220911014250363"></p><hr><blockquote><h6 id="总结与分辨-1"><a href="#总结与分辨-1" class="headerlink" title="总结与分辨"></a>总结与分辨</h6></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171044630.png" alt="image-20220911014348941"></p><hr><h2 id="第三章-函数"><a href="#第三章-函数" class="headerlink" title="第三章 函数"></a>第三章 函数</h2><h3 id="1-函数的定义"><a href="#1-函数的定义" class="headerlink" title="1.函数的定义"></a>1.函数的定义</h3><h4 id="①函数的定义"><a href="#①函数的定义" class="headerlink" title="①函数的定义"></a>①函数的定义</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171044602.png" alt="image-20220911124923133"></p><hr><h4 id="②函数与关系的区别"><a href="#②函数与关系的区别" class="headerlink" title="②函数与关系的区别"></a>②函数与关系的区别</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911125235122.png" alt="image-20220911125235122"></p><hr><h4 id="③函数的特点"><a href="#③函数的特点" class="headerlink" title="③函数的特点"></a>③函数的特点</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171044505.png" alt="image-20220911125411430"></p><hr><h4 id="④函数的数量问题"><a href="#④函数的数量问题" class="headerlink" title="④函数的数量问题"></a>④函数的数量问题</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171044973.png" alt="image-20220911125609952"></p><hr><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171044032.png" alt="image-20220911125643430"></p><hr><h3 id="2-特殊函数"><a href="#2-特殊函数" class="headerlink" title="2.特殊函数"></a>2.特殊函数</h3><h4 id="①特殊函数的分类"><a href="#①特殊函数的分类" class="headerlink" title="①特殊函数的分类"></a>①特殊函数的分类</h4><blockquote><p>单射函数、满射函数、双射函数</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171044623.png" alt="image-20220911125944512"></p><hr><h4 id="②特殊函数的必要条件"><a href="#②特殊函数的必要条件" class="headerlink" title="②特殊函数的必要条件"></a>②特殊函数的必要条件</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171044713.png" alt="image-20220911130049471"></p><hr><h4 id="③特殊函数的数量"><a href="#③特殊函数的数量" class="headerlink" title="③特殊函数的数量"></a>③特殊函数的数量</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171044615.png" alt="image-20220911130617104"></p><hr><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171044484.png" alt="image-20220911130634418"></p><hr><h3 id="3-函数的运算"><a href="#3-函数的运算" class="headerlink" title="3.函数的运算"></a>3.函数的运算</h3><h4 id="①函数的基本运算"><a href="#①函数的基本运算" class="headerlink" title="①函数的基本运算"></a>①函数的基本运算</h4><blockquote><p>函数是一种&#x3D;&#x3D;特殊的关系&#x3D;&#x3D;，因此关系的所有运算都适用于函数，如，集合的基本运算、关系的复合运算和逆运算等。但运算的结果并不一定都是函数，<strong>如下基本运算就不是函数</strong></p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171044198.png" alt="image-20220911131251957"></p><hr><h4 id="②函数的复合运算"><a href="#②函数的复合运算" class="headerlink" title="②函数的复合运算"></a>②函数的复合运算</h4><blockquote><p>函数是一种特殊的关系，能进行关系的复合运算。函数经复合运算之后仍然是函数。</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171044944.png" alt="image-20220911131425568"></p><hr><h4 id="③函数复合的性质"><a href="#③函数复合的性质" class="headerlink" title="③函数复合的性质"></a>③函数复合的性质</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171044007.png" alt="image-20220911131655439"></p><hr><h4 id="④逆运算的定义"><a href="#④逆运算的定义" class="headerlink" title="④逆运算的定义"></a>④逆运算的定义</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171044592.png" alt="image-20220911131913196"></p><hr><h4 id="⑤复合函数的实例（洗牌）"><a href="#⑤复合函数的实例（洗牌）" class="headerlink" title="⑤复合函数的实例（洗牌）"></a>⑤复合函数的实例（洗牌）</h4><p>​</p><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171045207.png" alt="image-20220911132037236"></p><hr><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171045365.png" alt="image-20220911132056561"></p><hr><h4 id="⑥复合函数与逆函数的实例（凯撒密码）"><a href="#⑥复合函数与逆函数的实例（凯撒密码）" class="headerlink" title="⑥复合函数与逆函数的实例（凯撒密码）"></a>⑥复合函数与逆函数的实例（凯撒密码）</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171045165.png" alt="image-20220911132234843"></p><hr><h2 id="第四章-命题逻辑"><a href="#第四章-命题逻辑" class="headerlink" title="第四章 命题逻辑"></a>第四章 命题逻辑</h2><h3 id="1-命题"><a href="#1-命题" class="headerlink" title="1.命题"></a>1.命题</h3><h4 id="①命题的定义"><a href="#①命题的定义" class="headerlink" title="①命题的定义"></a>①命题的定义</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171045220.png" alt="image-20220911132645131"></p><hr><h4 id="②简单命题-x2F-原子命题"><a href="#②简单命题-x2F-原子命题" class="headerlink" title="②简单命题&#x2F;原子命题"></a>②简单命题&#x2F;原子命题</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171045851.png" alt="image-20220911132948768"></p><hr><h4 id="③复合命题"><a href="#③复合命题" class="headerlink" title="③复合命题"></a>③复合命题</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171045515.png" alt="image-20220911133047559"></p><hr><h3 id="2-命题联结词"><a href="#2-命题联结词" class="headerlink" title="2.命题联结词"></a>2.命题联结词</h3><blockquote><p>否定联结词 ¬</p><p>合取联结词 ∧</p><p>析取联结词 ∨</p><p>蕴含联结词 → &#x3D;&#x3D;前真后假方为假&#x3D;&#x3D;</p><p>等价联结词 ↔ &#x3D;&#x3D;同真同假方为真&#x3D;&#x3D;</p><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171045893.png" alt="image-20220911134601133"></p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171045919.png" alt="image-20220911133848023"></p><hr><h3 id="3-命题符号化及其应用"><a href="#3-命题符号化及其应用" class="headerlink" title="3.命题符号化及其应用"></a>3.命题符号化及其应用</h3><ul><li>命题符号化一般分为三个步骤</li></ul><blockquote><p>①简单命题的符号化</p><p>②联结词的符号化</p><p>③“联结”简单命题</p></blockquote><h3 id="4-命题公式和真值表"><a href="#4-命题公式和真值表" class="headerlink" title="4.命题公式和真值表"></a>4.命题公式和真值表</h3><h4 id="①命题常量和命题变元定义"><a href="#①命题常量和命题变元定义" class="headerlink" title="①命题常量和命题变元定义"></a>①命题常量和命题变元定义</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171045494.png" alt="image-20220911134428132"></p><hr><h4 id="②成真赋值和成假赋值"><a href="#②成真赋值和成假赋值" class="headerlink" title="②成真赋值和成假赋值"></a>②成真赋值和成假赋值</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171045970.png" alt="image-20220911134707106"></p><hr><h4 id="③真值表"><a href="#③真值表" class="headerlink" title="③真值表"></a>③真值表</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171045552.png" alt="image-20220911134758587"></p><hr><h3 id="5-命题公式的分类"><a href="#5-命题公式的分类" class="headerlink" title="5.命题公式的分类"></a>5.命题公式的分类</h3><h4 id="①重言式-x2F-永真命题公式"><a href="#①重言式-x2F-永真命题公式" class="headerlink" title="①重言式&#x2F;永真命题公式"></a>①重言式&#x2F;永真命题公式</h4><blockquote><p>任何情况下均为真</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171045816.png" alt="image-20220911140139368"></p><hr><h4 id="②可满足公式"><a href="#②可满足公式" class="headerlink" title="②可满足公式"></a>②可满足公式</h4><blockquote><p>至少存在一种为真的情况</p><ul><li>重言式是特殊的可满足公式</li></ul></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171045062.png" alt="image-20220911140303120"></p><hr><h4 id="③矛盾式-x2F-永假命题公式"><a href="#③矛盾式-x2F-永假命题公式" class="headerlink" title="③矛盾式&#x2F;永假命题公式"></a>③矛盾式&#x2F;永假命题公式</h4><blockquote><p>在任何情况下均为假</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171045454.png" alt="image-20220911140441783"></p><hr><h3 id="6-命题公式的逻辑等值及应用"><a href="#6-命题公式的逻辑等值及应用" class="headerlink" title="6.命题公式的逻辑等值及应用"></a>6.命题公式的逻辑等值及应用</h3><h4 id="①命题公式的等值式"><a href="#①命题公式的等值式" class="headerlink" title="①命题公式的等值式"></a>①命题公式的等值式</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171045130.png" alt="image-20220911140727900"></p><hr><h4 id="②基本等值式"><a href="#②基本等值式" class="headerlink" title="②基本等值式"></a>②基本等值式</h4><blockquote><p>可以和集合的交并补等操作进行互换</p><p>&#x3D;&#x3D;重点&#x3D;&#x3D;    ⑪~⑯   德摩根律、蕴含等值式、等价等值式、假言易位（逆否）、等价否定等价式（逆否）、归谬论</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171045828.png" alt="image-20220911142136413"></p><hr><h4 id="③等值演算"><a href="#③等值演算" class="headerlink" title="③等值演算"></a>③等值演算</h4><blockquote><p>&#x3D;&#x3D;<strong>在等值演算的时候要注意符号的优先级，确定好式子的前界和后界</strong>&#x3D;&#x3D;</p><ul><li>同时也要合理使用结合律来简化操作去除括号</li><li>优先级越高越放在最后看，先看优先级低的，将其转化为优先级高的</li></ul></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171045397.png" alt="image-20220911152632688"></p><blockquote><p>证明两个公式等值</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171045320.png" alt="image-20220911145420641"></p><hr><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171045951.png" alt="image-20220911145617869"></p><hr><blockquote><p>简化公式</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171046056.png" alt="image-20220911151920567"></p><ul><li>也可以再写一步<strong>蕴含等值式</strong>，得出¬p∨r</li></ul><hr><blockquote><p>等值演算也可以用来判断公式的类型：重言式、矛盾式等</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171046061.png" alt="image-20220911152246039"></p><hr><blockquote><p>示例</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171046062.png" alt="image-20220911153013539"></p><hr><h3 id="7-范式"><a href="#7-范式" class="headerlink" title="7.范式"></a>7.范式</h3><h4 id="①简单析取式和简单合取式"><a href="#①简单析取式和简单合取式" class="headerlink" title="①简单析取式和简单合取式"></a>①简单析取式和简单合取式</h4><blockquote><p>简单析取式和简单合取式的定义</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171046697.png" alt="image-20220911153338449"></p><hr><h4 id="②合取范式"><a href="#②合取范式" class="headerlink" title="②合取范式"></a>②合取范式</h4><blockquote><p>合取范式的定义</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171046072.png" alt="image-20220911153458157"></p><hr><h4 id="③命题公式的范式求解"><a href="#③命题公式的范式求解" class="headerlink" title="③命题公式的范式求解"></a>③命题公式的范式求解</h4><blockquote><p>任何命题公式都存在与之等值的析取范式和合取范式，但是不一定唯一</p><p>重点&#x3D;&#x3D;<strong>蕴涵等值式、等价等值式、双重否定律</strong>&#x3D;&#x3D;</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171046833.png" alt="image-20220911153733005"></p><hr><blockquote><p>示例</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171046796.png" alt="image-20220911153914758"></p><hr><h4 id="④命题公式的范式应用"><a href="#④命题公式的范式应用" class="headerlink" title="④命题公式的范式应用"></a>④命题公式的范式应用</h4><blockquote><p>示例例题</p><ul><li>首先把各种能达到齐全功能的选择方案进行合取（这里是根据题意进行操作）来得到原始式子</li><li>之后通过命题公式的规律求解得到<strong>命题范式</strong>，这里是<strong>简单析取式</strong></li><li>其中简单合取式子里面的<strong>每一个命题单元</strong>就是<strong>一个方案</strong></li></ul></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171046018.png" alt="image-20220911154959238"></p><hr><h3 id="8-主范式"><a href="#8-主范式" class="headerlink" title="8.主范式"></a>8.主范式</h3><h4 id="①极小项和极大项"><a href="#①极小项和极大项" class="headerlink" title="①极小项和极大项"></a>①极小项和极大项</h4><blockquote><p>简单合取式中，每个命题变元和其否定不同时出现，但是一定要出现一个</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171046392.png" alt="image-20220911171311250"></p><blockquote><p>n个命题变项可以生成2^n^个极小项和2^n^个极大项。</p></blockquote><hr><blockquote><p>其中，从<strong>（0,0,0）</strong>开始赋值，此时的符号表示为&#x3D;&#x3D;m<del>0</del>&#x3D;&#x3D;    此后依次赋值改为<strong>1</strong>   并向后递推</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171046471.png" alt="image-20220911172046604"></p><blockquote><p>极大项和极小项的成真赋值和成假赋值，彼此之间进行取非，一一对应，如上图</p></blockquote><hr><h4 id="②极小项和极大项的性质以及对应关系"><a href="#②极小项和极大项的性质以及对应关系" class="headerlink" title="②极小项和极大项的性质以及对应关系"></a>②极小项和极大项的性质以及对应关系</h4><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171046367.png" alt="image-20220911172332885"></p><hr><h4 id="③主析取范式"><a href="#③主析取范式" class="headerlink" title="③主析取范式"></a>③主析取范式</h4><blockquote><p>每个简单合取式之中都要有该命题变元的极小项，也就是<strong>一定</strong>要有某个<strong>命题变元</strong>的<strong>本身</strong>或者<strong>其否定</strong>，&#x3D;&#x3D;但不是同时有，只要有一个，其本身和其否定不能同时出现&#x3D;&#x3D;</p><p>任何命题公式都存在与之等值的唯一主析取范式</p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171046684.png" alt="image-20220911172515082"></p><hr><ul><li><h6 id="主析取范式的求解步骤"><a href="#主析取范式的求解步骤" class="headerlink" title="主析取范式的求解步骤"></a>主析取范式的求解步骤</h6></li></ul><blockquote><p>主要使用排中律进行求解添项</p><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171047372.png" alt="image-20220911173854477"></p></blockquote><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171047183.png" alt="image-20220911172621766"></p><hr><ul><li><h6 id="主析取范式的求解示例"><a href="#主析取范式的求解示例" class="headerlink" title="主析取范式的求解示例"></a>主析取范式的求解示例</h6></li></ul><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202209171047690.png" alt="image-20220911173425851"></p><hr><h4 id="④主合取范式"><a href="#④主合取范式" class="headerlink" title="④主合取范式"></a>④主合取范式</h4><blockquote><p>每个简单析取式之中都要有该命题变元的极大项，也就是<strong>一定</strong>要有某个<strong>命题变元</strong>的<strong>本身</strong>或者<strong>其否定</strong>，&#x3D;&#x3D;但不是同时有，只要有一个，其本身和其否定不能同时出现&#x3D;&#x3D;</p></blockquote><blockquote><p>任何命题公式都存在与之等值的唯一主合取范式</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911173539131.png" alt="image-20220911173539131"></p><hr><ul><li><h6 id="主合取范式的求解步骤"><a href="#主合取范式的求解步骤" class="headerlink" title="主合取范式的求解步骤"></a>主合取范式的求解步骤</h6></li></ul><blockquote><p>主要使用同一律和矛盾律进行求解添项</p><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911174223532.png" alt="image-20220911174223532"></p><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911174237483.png" alt="image-20220911174237483"></p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911174105258.png" alt="image-20220911174105258"></p><hr><ul><li>主合取范式的求解示例</li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911174431500.png" alt="image-20220911174431500"></p><hr><blockquote><p>其中符号下标的表示可以参考极小项和极大项的对应表格</p></blockquote><hr><h4 id="⑤主范式相关关系"><a href="#⑤主范式相关关系" class="headerlink" title="⑤主范式相关关系"></a>⑤主范式相关关系</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911175217847.png" alt="image-20220911175217847"></p><hr><blockquote><p>如题，可以发现主合取范式的符号表示正好和主析取范式的符号表示在0~7之间互补，因此可以复习一下之前的知识点</p><ul><li>主范式的<strong>符号表示</strong>（m<del>0</del>）对应的极小元（命题公式pVqVr）根据命题单元的个数n决定数量，其个数为2^n^</li><li>主析取范式使用小写m<del>0</del>表示，主合取范式使用大写M<del>0</del>表示</li><li>主析取范式的下标和主合取范式的下标在<strong>0~2^n^-1</strong>范围内互补^(？)^</li><li>(?)的原因是：极大项和极小项的成真赋值和成假赋值，彼此之间进行取非，一一对应，可以参考<strong>四.8.①</strong>表格，详细证明见下</li></ul></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911180117009.png" alt="image-20220911180117009"></p><hr><h4 id="⑥主范式的作用"><a href="#⑥主范式的作用" class="headerlink" title="⑥主范式的作用"></a>⑥主范式的作用</h4><blockquote><ul><li><h6 id="通过求解主析取范式和主合取范式可以统一表示某个问题的表达，因为其具有唯一的主范式，通过此唯一的主范式可以求出其对应的成真赋值和成假赋值"><a href="#通过求解主析取范式和主合取范式可以统一表示某个问题的表达，因为其具有唯一的主范式，通过此唯一的主范式可以求出其对应的成真赋值和成假赋值" class="headerlink" title="通过求解主析取范式和主合取范式可以统一表示某个问题的表达，因为其具有唯一的主范式，通过此唯一的主范式可以求出其对应的成真赋值和成假赋值"></a>通过求解主析取范式和主合取范式可以统一表示某个问题的表达，因为其具有唯一的主范式，通过此唯一的主范式可以求出其对应的成真赋值和成假赋值</h6></li><li><h6 id="因此可以判断命题公式的类型：重言式、矛盾式、非永真式的可满足式"><a href="#因此可以判断命题公式的类型：重言式、矛盾式、非永真式的可满足式" class="headerlink" title="因此可以判断命题公式的类型：重言式、矛盾式、非永真式的可满足式"></a>因此可以判断命题公式的类型：重言式、矛盾式、非永真式的可满足式</h6></li><li><h6 id="判断命题公式是否等值：当且仅当其具有相同的主析取范式-x2F-主合取范式"><a href="#判断命题公式是否等值：当且仅当其具有相同的主析取范式-x2F-主合取范式" class="headerlink" title="判断命题公式是否等值：当且仅当其具有相同的主析取范式&#x2F;主合取范式"></a>判断命题公式是否等值：当且仅当其具有相同的主析取范式&#x2F;主合取范式</h6></li><li><h6 id="因此也便于计算机求解相关问题"><a href="#因此也便于计算机求解相关问题" class="headerlink" title="因此也便于计算机求解相关问题"></a>因此也便于计算机求解相关问题</h6></li></ul></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911180955032.png" alt="image-20220911180955032"></p><hr><blockquote><h6 id="简记："><a href="#简记：" class="headerlink" title="简记："></a>简记：</h6><ul><li><p>小m全有为重言式&#x2F;永真式</p></li><li><p>大M全有为矛盾式</p></li><li><p>只有一部分则非永真式的可满足式</p></li></ul></blockquote><hr><h4 id="⑦主范式的实际应用"><a href="#⑦主范式的实际应用" class="headerlink" title="⑦主范式的实际应用"></a>⑦主范式的实际应用</h4><blockquote><p>派人问题</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911181812335.png" alt="image-20220911181812335"></p><h3 id="9-简单证明推理"><a href="#9-简单证明推理" class="headerlink" title="9.简单证明推理"></a>9.简单证明推理</h3><h4 id="①推理的基本形式定义"><a href="#①推理的基本形式定义" class="headerlink" title="①推理的基本形式定义"></a>①推理的基本形式定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911185947387.png" alt="image-20220911185947387"></p><hr><h4 id="②永真-x2F-重言蕴含式的定理及定义"><a href="#②永真-x2F-重言蕴含式的定理及定义" class="headerlink" title="②永真&#x2F;重言蕴含式的定理及定义"></a>②永真&#x2F;重言蕴含式的定理及定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911205152002.png" alt="image-20220911205152002"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911205611346.png" alt="image-20220911205611346"></p><hr><h4 id="③简单证明推理例题"><a href="#③简单证明推理例题" class="headerlink" title="③简单证明推理例题"></a>③简单证明推理例题</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911205814528.png" alt="image-20220911205814528"></p><hr><blockquote><p>如上例题，将所有前提以及结论使用命题公式表示出来，再进行交集操作，因为要保证这些要同时成立</p></blockquote><blockquote><p>之后解法有三：</p><p>①利用等值演算</p><p>②利用主析取范式和主合取范式</p><p>③利用真值表</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911210515530.png" alt="image-20220911210515530"></p><hr><h3 id="10-构造证明推理"><a href="#10-构造证明推理" class="headerlink" title="10.构造证明推理"></a>10.构造证明推理</h3><blockquote><p>引言</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911210924444.png" alt="image-20220911210924444"></p><hr><h4 id="①构造证明推理定义"><a href="#①构造证明推理定义" class="headerlink" title="①构造证明推理定义"></a>①构造证明推理定义</h4><blockquote><p>基于<strong>永真蕴含式</strong>或<strong>推理规则</strong>进行的命题公式的推理称为<strong>构造证明推理</strong></p></blockquote><h4 id="②构造证明推理规则"><a href="#②构造证明推理规则" class="headerlink" title="②构造证明推理规则"></a>②构造证明推理规则</h4><hr><blockquote><p>&#x3D;&#x3D;重点记忆&#x3D;&#x3D;</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911211212881.png" alt="image-20220911211212881"></p><hr><h4 id="③置换规则"><a href="#③置换规则" class="headerlink" title="③置换规则"></a>③置换规则</h4><blockquote><p><strong>①前提引入规则:在证明的任何步骤上，都可以引入前提</strong><br><strong>②结论引入规则:在推理中，若一个或一组前提已证出结论B，则B可引入到以后的推理中作为前提使用。</strong><br><strong>③置换规则:在推理过程的任何步骤上，命题公式中的任何命题公式都可以用与之等值的命题公式置换。</strong></p></blockquote><hr><h4 id="④直接构造证明推理"><a href="#④直接构造证明推理" class="headerlink" title="④直接构造证明推理"></a>④直接构造证明推理</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911212801964.png" alt="image-20220911212801964"></p><hr><h4 id="⑤间接构造证明推理"><a href="#⑤间接构造证明推理" class="headerlink" title="⑤间接构造证明推理"></a>⑤间接构造证明推理</h4><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911213149091.png" alt="image-20220911213149091"></p><hr><blockquote><p>也就是将所求结论的前界加入到前提之中形成析取命题公式，之后继续推导结论的后界为真即可</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911213343238.png" alt="image-20220911213343238"></p><hr><blockquote><h6 id="除上述两种方法之外，还可以使用归谬法来证明原命题的正确性，也即把结论取反，然后和前提进行等值演算得出其结果为0（假）"><a href="#除上述两种方法之外，还可以使用归谬法来证明原命题的正确性，也即把结论取反，然后和前提进行等值演算得出其结果为0（假）" class="headerlink" title="除上述两种方法之外，还可以使用归谬法来证明原命题的正确性，也即把结论取反，然后和前提进行等值演算得出其结果为0（假）"></a>除上述两种方法之外，还可以使用归谬法来证明原命题的正确性，也即把结论取反，然后和前提进行等值演算得出其结果为0（假）</h6></blockquote><hr><h2 id="第五章-谓词逻辑"><a href="#第五章-谓词逻辑" class="headerlink" title="第五章 谓词逻辑"></a>第五章 谓词逻辑</h2><h3 id="1-谓词逻辑的基本概念"><a href="#1-谓词逻辑的基本概念" class="headerlink" title="1.谓词逻辑的基本概念"></a>1.谓词逻辑的基本概念</h3><h4 id="①个体词的定义"><a href="#①个体词的定义" class="headerlink" title="①个体词的定义"></a>①个体词的定义</h4><blockquote><p>个体词→个体常量、个体变量   </p><p>个体域→全总域</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911223127225.png" alt="image-20220911223127225"></p><hr><h4 id="②谓词定义"><a href="#②谓词定义" class="headerlink" title="②谓词定义"></a>②谓词定义</h4><blockquote><p>谓词常量</p><p>谓词变量</p><p>n元谓词，特殊的有0元谓词</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911223421093.png" alt="image-20220911223421093"></p><hr><ul><li><h5 id="谓词的使用示例"><a href="#谓词的使用示例" class="headerlink" title="谓词的使用示例"></a>谓词的使用示例</h5></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911223624836.png" alt="image-20220911223624836"></p><hr><h4 id="③函词"><a href="#③函词" class="headerlink" title="③函词"></a>③函词</h4><blockquote><p>函词的定义</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911224438413.png" alt="image-20220911224438413"></p><hr><blockquote><p>函词就是一般意义下的函数，n元函词就是n元函数，只不过<strong>函词</strong>的<strong>定义域</strong>为&#x3D;&#x3D;个体域的笛卡尔积&#x3D;&#x3D;，<strong>函词</strong>的<strong>值域</strong>为&#x3D;&#x3D;个体域&#x3D;&#x3D;</p><p>值得注意的是：n元谓词也是一个n元函数，其区别在于：前者的值域为<strong>0和1</strong>，而后者的值域为<strong>个体域</strong></p></blockquote><ul><li><h6 id="函词和谓词的区别："><a href="#函词和谓词的区别：" class="headerlink" title="函词和谓词的区别："></a>函词和谓词的区别：</h6></li></ul><blockquote><p>函词使用小写，谓词使用大写</p><p>函词是映射，谓词表示特定的性质或者关系</p><p>函词通常是&#x3D;&#x3D;是什么&#x3D;&#x3D;，谓词通常是&#x3D;&#x3D;的什么&#x3D;&#x3D;或者&#x3D;&#x3D;在……北方&#x3D;&#x3D;之类的</p></blockquote><h4 id="④量词"><a href="#④量词" class="headerlink" title="④量词"></a>④量词</h4><h6 id="一、全称量词"><a href="#一、全称量词" class="headerlink" title="一、全称量词"></a>一、全称量词</h6><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911225145929.png" alt="image-20220911225145929"></p><hr><h6 id="二、存在量词"><a href="#二、存在量词" class="headerlink" title="二、存在量词"></a>二、存在量词</h6><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911225245778.png" alt="image-20220911225245778"></p><hr><h3 id="2-谓词符号化"><a href="#2-谓词符号化" class="headerlink" title="2.谓词符号化"></a>2.谓词符号化</h3><h4 id="①谓词符号化的常用规则"><a href="#①谓词符号化的常用规则" class="headerlink" title="①谓词符号化的常用规则"></a>①谓词符号化的常用规则</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911225447840.png" alt="image-20220911225447840"></p><hr><h4 id="②谓词符号化应用（机器人移盒子问题）"><a href="#②谓词符号化应用（机器人移盒子问题）" class="headerlink" title="②谓词符号化应用（机器人移盒子问题）"></a>②谓词符号化应用（机器人移盒子问题）</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911225615726.png" alt="image-20220911225615726"></p><hr><h3 id="3-谓词公式"><a href="#3-谓词公式" class="headerlink" title="3.谓词公式"></a>3.谓词公式</h3><h4 id="①项"><a href="#①项" class="headerlink" title="①项"></a>①项</h4><blockquote><p>项的定义</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911225751497.png" alt="image-20220911225751497"></p><hr><h4 id="②原子谓词公式"><a href="#②原子谓词公式" class="headerlink" title="②原子谓词公式"></a>②原子谓词公式</h4><blockquote><p>可以类比<strong>简单公式&#x2F;原子公式</strong></p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911232745285.png" alt="image-20220911232745285"></p><hr><h4 id="③谓词逻辑公式"><a href="#③谓词逻辑公式" class="headerlink" title="③谓词逻辑公式"></a>③谓词逻辑公式</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911233106683.png" alt="image-20220911233106683"></p><hr><h4 id="④约束变元和自由变元"><a href="#④约束变元和自由变元" class="headerlink" title="④约束变元和自由变元"></a>④约束变元和自由变元</h4><blockquote><p>辖域&#x2F;作用域&#x2F;约束域、作用变元&#x2F;指导变元、约束出现&#x2F;约束变元、自由出现&#x2F;自由变元</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911233610910.png" alt="image-20220911233610910"></p><hr><ul><li><h6 id="约束变元和自由变元示例"><a href="#约束变元和自由变元示例" class="headerlink" title="约束变元和自由变元示例"></a>约束变元和自由变元示例</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911233742587.png" alt="image-20220911233742587"></p><hr><blockquote><p>在不造成公式冲突的情况下，可以更改一个或者多个变元的符号</p><p>这样可以使原得公式更为清晰明了</p></blockquote><hr><h3 id="4-谓词公式的解释和分类"><a href="#4-谓词公式的解释和分类" class="headerlink" title="4.谓词公式的解释和分类"></a>4.谓词公式的解释和分类</h3><h4 id="①谓词公式的解释定义"><a href="#①谓词公式的解释定义" class="headerlink" title="①谓词公式的解释定义"></a>①谓词公式的解释定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911234623227.png" alt="image-20220911234623227"></p><hr><blockquote><p>示例</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911234647719.png" alt="image-20220911234647719"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911234735601.png" alt="image-20220911234735601"></p><hr><blockquote><h6 id="由此可见，根据不同的解释，谓词公式在其解释下的取值有所不同，这里可以类比第四章的命题公式的成真、成假赋值"><a href="#由此可见，根据不同的解释，谓词公式在其解释下的取值有所不同，这里可以类比第四章的命题公式的成真、成假赋值" class="headerlink" title="由此可见，根据不同的解释，谓词公式在其解释下的取值有所不同，这里可以类比第四章的命题公式的成真、成假赋值"></a>由此可见，根据不同的解释，谓词公式在其解释下的取值有所不同，这里可以类比第四章的命题公式的成真、成假赋值</h6></blockquote><h4 id="②谓词公式的分类"><a href="#②谓词公式的分类" class="headerlink" title="②谓词公式的分类"></a>②谓词公式的分类</h4><blockquote><p>永真谓词公式、可满足谓词公式、永假谓词公式</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911235014785.png" alt="image-20220911235014785"></p><hr><blockquote><p>在谓词逻辑中，谓词公式的解释依赖于个体域，导致了真值表法在判断一个谓词公式的类型时很难实施。</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911235304812.png" alt="image-20220911235304812"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911235322458.png" alt="image-20220911235322458"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220911235350258.png" alt="image-20220911235350258"></p><hr><h3 id="5-谓词公式的逻辑等值"><a href="#5-谓词公式的逻辑等值" class="headerlink" title="5.谓词公式的逻辑等值"></a>5.谓词公式的逻辑等值</h3><h4 id="①谓词公式的等值式"><a href="#①谓词公式的等值式" class="headerlink" title="①谓词公式的等值式"></a>①谓词公式的等值式</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912000502339.png" alt="image-20220912000502339"></p><hr><h4 id="②谓词公式的代换实例"><a href="#②谓词公式的代换实例" class="headerlink" title="②谓词公式的代换实例"></a>②谓词公式的代换实例</h4><blockquote><p>通过使用<strong>谓词公式</strong>代换<strong>命题变元</strong>所得到的<strong>谓词公式</strong>称为其对应的一个<strong>代换实例</strong></p><p>注：<strong>可满足公式的代换实例不一定是可满足式</strong></p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912001128831.png" alt="image-20220912001128831"></p><hr><h4 id="③命题逻辑等值式的推广"><a href="#③命题逻辑等值式的推广" class="headerlink" title="③命题逻辑等值式的推广"></a>③命题逻辑等值式的推广</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912001343245.png" alt="image-20220912001343245"></p><blockquote><p>注意这里的全称量词和存在量词要保持一致</p><p>注意这里的A(x)里面的x为自由变元，因为要保证其确定性，所以取任何值不能影响其结果，不能只在一部分情况下适用</p></blockquote><hr><h4 id="⑤量词消去律"><a href="#⑤量词消去律" class="headerlink" title="⑤量词消去律"></a>⑤量词消去律</h4><blockquote><p>全称量词也就是对任意的个体变元都适用，在这里我们使用交集</p><p>存在量词也就是存在一个个体变元使用，在这里我们使用并集</p><p>注意在这里量词的顺序很重要，顺序不同结果不同，因此并不能随意的调换</p><p>A(x)是谓词公式，并不要简单的理解为原子谓词公式</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912002117385.png" alt="image-20220912002117385"></p><hr><ul><li><h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912002611896.png" alt="image-20220912002611896"></p><hr><h4 id="⑥量词与否定的交换律"><a href="#⑥量词与否定的交换律" class="headerlink" title="⑥量词与否定的交换律"></a>⑥量词与否定的交换律</h4><blockquote><p>也就是量词和否定转换之后，量词的全称和存在属性要改变</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912002722345.png" alt="image-20220912002722345"></p><hr><h4 id="⑦量词辖域收缩与扩张律"><a href="#⑦量词辖域收缩与扩张律" class="headerlink" title="⑦量词辖域收缩与扩张律"></a>⑦量词辖域收缩与扩张律</h4><blockquote><p>就是贴一块儿而已，简单，感觉没必要记，但是还是写一下</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912003518206.png" alt="image-20220912003518206"></p><hr><h4 id="⑧量词分配律和双量词交换律"><a href="#⑧量词分配律和双量词交换律" class="headerlink" title="⑧量词分配律和双量词交换律"></a>⑧量词分配律和双量词交换律</h4><blockquote><p>注意第三、四条的X和Y的变化</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912003756370.png" alt="image-20220912003756370"></p><hr><ul><li><h6 id="例题示例"><a href="#例题示例" class="headerlink" title="例题示例"></a>例题示例</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912004616829.png" alt="image-20220912004616829"></p><hr><h3 id="6-前束范式"><a href="#6-前束范式" class="headerlink" title="6.前束范式"></a>6.前束范式</h3><h4 id="①前束范式的定义"><a href="#①前束范式的定义" class="headerlink" title="①前束范式的定义"></a>①前束范式的定义</h4><blockquote><p>前束范式、母式</p></blockquote><blockquote><p>前束范式可以类比前面的主范式，但是是两个完全不同的东西，互通的方面也不是很多</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912005146129.png" alt="image-20220912005146129"></p><hr><blockquote><p>任何谓词公式都存在与之等值的前束范式，但是并不唯一，因为前面的量词位置可以不同，约束变元的表达形式也可以不同</p></blockquote><hr><h4 id="②前束范式的求法原理"><a href="#②前束范式的求法原理" class="headerlink" title="②前束范式的求法原理"></a>②前束范式的求法原理</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912005527214.png" alt="image-20220912005527214"></p><hr><ul><li><h6 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912005855308.png" alt="image-20220912005855308"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912010006381.png" alt="image-20220912010006381"></p><hr><h3 id="7-谓词逻辑推理"><a href="#7-谓词逻辑推理" class="headerlink" title="7.谓词逻辑推理"></a>7.谓词逻辑推理</h3><blockquote><p>在谓词逻辑中，谓词公式的推理依赖于个体域，求解谓词公式在各种解释下的真值往往非常繁琐，甚至异常困难</p><p>这就导致了命题逻辑中的简单证明推理在谓词逻辑中不容易实施</p><p>在谓词逻辑中的推理通常是基于永真蕴含式或构造逻辑推理</p></blockquote><hr><h4 id="①谓词逻辑推理的基本形式"><a href="#①谓词逻辑推理的基本形式" class="headerlink" title="①谓词逻辑推理的基本形式"></a>①谓词逻辑推理的基本形式</h4><blockquote><p>可以类比命题逻辑推理的基本形式</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912010851848.png" alt="image-20220912010851848"></p><hr><h4 id="②简单证明推理"><a href="#②简单证明推理" class="headerlink" title="②简单证明推理"></a>②简单证明推理</h4><blockquote><p>可以转换为<strong>重言式</strong>的证明或者<strong>矛盾式</strong>的证明</p><p><strong>矛盾式</strong>也就是将&#x3D;&#x3D;重言式的蕴含式&#x3D;&#x3D;使用蕴涵等值式之后将左侧的&#x3D;&#x3D;非&#x3D;&#x3D;再进行代入，如下图</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912010951676.png" alt="image-20220912010951676"></p><hr><blockquote><p>也可以代入实例</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912011258032.png" alt="image-20220912011258032"></p><hr><blockquote><p>命题逻辑中的推理规则也可用在谓词逻辑的构造证明推理中。</p></blockquote><hr><h4 id="③构造证明推理规则"><a href="#③构造证明推理规则" class="headerlink" title="③构造证明推理规则"></a>③构造证明推理规则</h4><blockquote><p>构造证明推理可以有效解决苏格拉底假言三段论的问题 </p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912011411995.png" alt="image-20220912011411995"></p><hr><blockquote><p>以下为多出来的有关量词的消去规则</p><p><strong>注意</strong>：约束变元的限制条件</p></blockquote><blockquote><p>选择一个常数a进行代入就可以</p><h5 id="US规则"><a href="#US规则" class="headerlink" title="US规则"></a>US规则</h5><h5 id="UG规则"><a href="#UG规则" class="headerlink" title="UG规则"></a>UG规则</h5><p>同样选择一个常数a代入就可以</p><h5 id="ES规则"><a href="#ES规则" class="headerlink" title="ES规则"></a>ES规则</h5><h5 id="EG规则"><a href="#EG规则" class="headerlink" title="EG规则"></a>EG规则</h5></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912011549054.png" alt="image-20220912011549054"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912011627624.png" alt="image-20220912011627624"></p><hr><ul><li><h6 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912012310181.png" alt="image-20220912012310181"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912012330948.png" alt="image-20220912012330948"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912012838287.png" alt="image-20220912012838287"></p><hr><blockquote><p>不能交换的原因：③是由②所得来的，是存在量词，③具有特殊性，而④是由①推导来的，是全称量词，④具有一般性</p><p>特殊可以满足一般，但是一般不一定满足特殊，而<strong>c</strong>又已经确定为同一个，因此该顺序不能交换</p></blockquote><hr><h4 id="④附加前提证明法"><a href="#④附加前提证明法" class="headerlink" title="④附加前提证明法"></a>④附加前提证明法</h4><blockquote><p>在谓词逻辑的推理中，如果结论是以蕴含式形式给出，则蕴含式的前件可作为推理的前提使用。</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912013315247.png" alt="image-20220912013315247"></p><hr><ul><li><h6 id="例题示例-1"><a href="#例题示例-1" class="headerlink" title="例题示例"></a>例题示例</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912013403017.png" alt="image-20220912013403017"></p><hr><h4 id="⑤反证法-x2F-归谬法"><a href="#⑤反证法-x2F-归谬法" class="headerlink" title="⑤反证法&#x2F;归谬法"></a>⑤反证法&#x2F;归谬法</h4><blockquote><p>结论的否定引入</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912013501864.png" alt="image-20220912013501864"></p><hr><ul><li><h6 id="示例例题"><a href="#示例例题" class="headerlink" title="示例例题"></a>示例例题</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912013544101.png" alt="image-20220912013544101"></p><hr><hr><hr><ul><li><h1 id="上下册分分界线"><a href="#上下册分分界线" class="headerlink" title="上下册分分界线"></a>上下册分分界线</h1></li></ul><hr><hr><hr><h2 id="第六章-代数系统"><a href="#第六章-代数系统" class="headerlink" title="第六章 代数系统"></a>第六章 代数系统</h2><h3 id="1-代数系统的基本概念"><a href="#1-代数系统的基本概念" class="headerlink" title="1.代数系统的基本概念"></a>1.代数系统的基本概念</h3><h4 id="①代数运算的定义及其性质"><a href="#①代数运算的定义及其性质" class="headerlink" title="①代数运算的定义及其性质"></a>①代数运算的定义及其性质</h4><blockquote><p>唯一性、全域性、&#x3D;&#x3D;封闭性&#x3D;&#x3D;</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912144936652.png" alt="image-20220912144936652"></p><hr><ul><li><h6 id="代数运算的判断示例"><a href="#代数运算的判断示例" class="headerlink" title="代数运算的判断示例"></a>代数运算的判断示例</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912145107535.png" alt="image-20220912145107535"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912145133702.png" alt="image-20220912145133702"></p><blockquote><p>模K加法</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912145747373.png" alt="image-20220912145747373"></p><blockquote><p>模K乘法</p></blockquote><hr><h4 id="②运算表"><a href="#②运算表" class="headerlink" title="②运算表"></a>②运算表</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912151117962.png" alt="image-20220912151117962"></p><hr><h4 id="③代数系统的定义"><a href="#③代数系统的定义" class="headerlink" title="③代数系统的定义"></a>③代数系统的定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912151218375.png" alt="image-20220912151218375"></p><hr><h4 id="④子代数系统的定义"><a href="#④子代数系统的定义" class="headerlink" title="④子代数系统的定义"></a>④子代数系统的定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912151427447.png" alt="image-20220912151427447"></p><hr><ul><li><h6 id="示例及其证明"><a href="#示例及其证明" class="headerlink" title="示例及其证明"></a>示例及其证明</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912151553317.png" alt="image-20220912151553317"></p><hr><h3 id="2-代数运算的基本性质"><a href="#2-代数运算的基本性质" class="headerlink" title="2.代数运算的基本性质"></a>2.代数运算的基本性质</h3><blockquote><p>交换律、结合律、分配律</p></blockquote><hr><h4 id="①交换律"><a href="#①交换律" class="headerlink" title="①交换律"></a>①交换律</h4><blockquote><p>是否满足交换律也可以通过看运算表是否对称的方式来判断</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912151939905.png" alt="image-20220912151939905"></p><hr><h4 id="②结合律"><a href="#②结合律" class="headerlink" title="②结合律"></a>②结合律</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912152116376.png" alt="image-20220912152116376"></p><hr><h4 id="③分配律"><a href="#③分配律" class="headerlink" title="③分配律"></a>③分配律</h4><blockquote><p>注意区分左可分配、右可分配</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912155005439.png" alt="image-20220912155005439"></p><hr><h4 id="④幂运算的定义"><a href="#④幂运算的定义" class="headerlink" title="④幂运算的定义"></a>④幂运算的定义</h4><blockquote><p>注意其中示例的运算方法，要根据具体的代数系统来进行操作</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912154817518.png" alt="image-20220912154817518"></p><hr><ul><li><h6 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912160414248.png" alt="image-20220912160414248"></p><hr><h3 id="3-代数运算的吸收律性质"><a href="#3-代数运算的吸收律性质" class="headerlink" title="3.代数运算的吸收律性质"></a>3.代数运算的吸收律性质</h3><blockquote><p>问题引入：如何像交并、析取合取一样抽象表述代数运算的吸收律</p><p>吸收律简记：括号内外的运算不同，而括号外有和括号内相同的部分，则不同的部分（B）被吸收，只留下相同的部分（A）</p><p>在运算系统中，还要注意其左右位置</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912161900294.png" alt="image-20220912161900294"></p><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912161415017.png" alt="image-20220912161415017"></p><hr><blockquote><p>这里的*和Δ仅仅表示二元运算</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912162433974.png" alt="image-20220912162433974"></p><blockquote><p><strong>这里说&#x3D;&#x3D;<em>&#x3D;&#x3D;对&#x3D;&#x3D;Δ&#x3D;&#x3D;是左可吸收的，也就是指&#x3D;&#x3D;</em>&#x3D;&#x3D;是在括号的外面，而&#x3D;&#x3D;Δ&#x3D;&#x3D;在括号的里面，同理可得右可吸收的</strong></p></blockquote><hr><ul><li><h6 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912162844332.png" alt="image-20220912162844332"></p><hr><h3 id="4-代数运算的幂等律和消去律"><a href="#4-代数运算的幂等律和消去律" class="headerlink" title="4.代数运算的幂等律和消去律"></a>4.代数运算的幂等律和消去律</h3><h4 id="①幂等律定义"><a href="#①幂等律定义" class="headerlink" title="①幂等律定义"></a>①幂等律定义</h4><blockquote><p>也就是二元运算作用于个体域中的每一个对象之后，结果还是它本身，那就符合幂等律</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912163223394.png" alt="image-20220912163223394"></p><hr><h4 id="②消去律定义"><a href="#②消去律定义" class="headerlink" title="②消去律定义"></a>②消去律定义</h4><blockquote><p>也就是等式相同可以推到得出等式同项相消除，留下来的部分相等</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912163524553.png" alt="image-20220912163524553"></p><hr><ul><li><h6 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912163824540.png" alt="image-20220912163824540"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912164129954.png" alt="image-20220912164129954"></p><hr><h3 id="5-代数运算的特殊元素"><a href="#5-代数运算的特殊元素" class="headerlink" title="5.代数运算的特殊元素"></a>5.代数运算的特殊元素</h3><h4 id="①等幂元"><a href="#①等幂元" class="headerlink" title="①等幂元"></a>①等幂元</h4><blockquote><p>在某个代数系统中，某个元素通过代数运算之后，结果还等于它自身，则该元素就是关于该运算的等幂元</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912164444984.png" alt="image-20220912164444984"></p><hr><ul><li><h6 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912164615647.png" alt="image-20220912164615647"></p><hr><h4 id="②零元"><a href="#②零元" class="headerlink" title="②零元"></a>②零元</h4><blockquote><p>任何元素和一个特定元素进行二元运算之后的结果始终等于该特殊元素，则该特殊元素称为零元</p><p>零元也有左右之分</p><p>零元必为等幂元</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912164721102.png" alt="image-20220912164721102"></p><hr><blockquote><p>零元具有唯一性，因为不能有两个特殊元素保证运算后和自身相等</p></blockquote><blockquote><p>运算表中，某元素是等幂元的充要条件是该元素在对角线上的取值为其本身</p></blockquote><blockquote><p>运算表中，某元素是零元的充要条件是该元素对应的行、列元素均与该元素相同</p></blockquote><hr><h4 id="③单位元"><a href="#③单位元" class="headerlink" title="③单位元"></a>③单位元</h4><blockquote><p>任何元素和一个特殊元素进行二元运算，所得结果都为选取的任何元素，则该特殊元素称为代数系统的单位元</p><p>幺元也必为等幂元</p><p>单位元也有左右之分</p><p>单位元又称为幺元</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912165416791.png" alt="image-20220912165416791"></p><hr><blockquote><p>幺元也具有唯一性，同理零元</p></blockquote><hr><ul><li><h6 id="幺元的求法"><a href="#幺元的求法" class="headerlink" title="幺元的求法"></a>幺元的求法</h6></li></ul><blockquote><p>假设代入求解法，此方法也适用于其他代数运算的特殊元素</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912165623960.png" alt="image-20220912165623960"></p><hr><h4 id="④逆元"><a href="#④逆元" class="headerlink" title="④逆元"></a>④逆元</h4><blockquote><p>某元素和另一个元素进行二元运算，所得结果为单位元e，则该元素称为某元素的逆元</p><p>逆元也有左右之分</p><p>每个元素的逆元都是唯一的</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912171027109.png" alt="image-20220912171027109"></p><hr><blockquote><p>元素逆元的逆元是其本身</p><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912174708805.png" alt="image-20220912174708805"></p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912175300977.png" alt="image-20220912175300977"></p><hr><ul><li><h6 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912175424160.png" alt="image-20220912175424160"></p><hr><h4 id="⑤可消去元"><a href="#⑤可消去元" class="headerlink" title="⑤可消去元"></a>⑤可消去元</h4><blockquote><p>定义</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912175654160.png" alt="image-20220912175654160"></p><hr><blockquote><p>如果a存在逆元，则a就是可消去元，证明如下</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912175929442.png" alt="image-20220912175929442"></p><hr><h4 id="⑥特殊元素求解"><a href="#⑥特殊元素求解" class="headerlink" title="⑥特殊元素求解"></a>⑥特殊元素求解</h4><blockquote><p>等幂元求解、零元求解</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912180225191.png" alt="image-20220912180225191"></p><hr><blockquote><p>单位元求解、幺元求解</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912180429775.png" alt="image-20220912180429775"></p><hr><blockquote><p>逆元求解</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912180528667.png" alt="image-20220912180528667"></p><hr><blockquote><p>可消去元求解</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912180831133.png" alt="image-20220912180831133"></p><hr><h3 id="6-同构代数系统"><a href="#6-同构代数系统" class="headerlink" title="6.同构代数系统"></a>6.同构代数系统</h3><blockquote><p>引入：使用双射函数来表示两个结构相同的代数系统之间的关系</p></blockquote><h4 id="①同构代数系统定义"><a href="#①同构代数系统定义" class="headerlink" title="①同构代数系统定义"></a>①同构代数系统定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912181447212.png" alt="image-20220912181447212"></p><hr><blockquote><p>证明代数系统同构，要构造出其符合的双射函数</p></blockquote><hr><h4 id="②同构代数系统的证明"><a href="#②同构代数系统的证明" class="headerlink" title="②同构代数系统的证明"></a>②同构代数系统的证明</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912181700006.png" alt="image-20220912181700006"></p><hr><h4 id="③自同构代数系统"><a href="#③自同构代数系统" class="headerlink" title="③自同构代数系统"></a>③自同构代数系统</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912181816958.png" alt="image-20220912181816958"></p><hr><h4 id="④自同构映射示例"><a href="#④自同构映射示例" class="headerlink" title="④自同构映射示例"></a>④自同构映射示例</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912181922228.png" alt="image-20220912181922228"></p><hr><h4 id="⑤代数系统同构关系性质"><a href="#⑤代数系统同构关系性质" class="headerlink" title="⑤代数系统同构关系性质"></a>⑤代数系统同构关系性质</h4><blockquote><p>代数系统的同构关系是等价关系</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912182116945.png" alt="image-20220912182116945"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912182053677.png" alt="image-20220912182053677"></p><blockquote><p>这里函数是有具体含义的，不能直接换给另一个用</p></blockquote><hr><p>*　###### 同构代数系统的概念可以推广到含有多个代数运算的代数系统</p><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912182411320.png" alt="image-20220912182411320"></p><hr><h3 id="7-同态代数系统"><a href="#7-同态代数系统" class="headerlink" title="7.同态代数系统"></a>7.同态代数系统</h3><blockquote><p>引入：两个代数系统没有完全相同的结构，但存在一些相似的性质</p></blockquote><h4 id="①同态代数系统的定义"><a href="#①同态代数系统的定义" class="headerlink" title="①同态代数系统的定义"></a>①同态代数系统的定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912182903899.png" alt="image-20220912182903899"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912182929819.png" alt="image-20220912182929819"></p><hr><blockquote><p>设函数f是代数系统&lt;S,﹡&gt;到&lt;T,◦&gt;的同态映射，则同态像f(S)是集合T的非空子集。</p></blockquote><hr><ul><li><h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912183259148.png" alt="image-20220912183259148"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912183324507.png" alt="image-20220912183324507"></p><hr><h4 id="②自同态代数系统"><a href="#②自同态代数系统" class="headerlink" title="②自同态代数系统"></a>②自同态代数系统</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912183502038.png" alt="image-20220912183502038"></p><hr><ul><li><h6 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912183536965.png" alt="image-20220912183536965"></p><hr><blockquote><p> N<del>6</del>中的元素为012345</p></blockquote><hr><blockquote><p>自同态映射的证明最关键的一步</p><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912183918566.png" alt="image-20220912183918566"></p></blockquote><hr><h4 id="③同态核"><a href="#③同态核" class="headerlink" title="③同态核"></a>③同态核</h4><blockquote><p>设函数f是代数系统&lt;S,﹡&gt;到&lt;T,◦&gt;的同态映射，则同态核Ker(f)是集合S的非空子集。</p><p>同态核可以用来求解子代数系统</p><p>注意&#x3D;&#x3D;<strong>f(x)</strong>&#x3D;&#x3D;的结果要是**&#x3D;&#x3D;幺元&#x3D;&#x3D;**才行</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912184350836.png" alt="image-20220912184350836"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912184506374.png" alt="image-20220912184506374"></p><hr><h3 id="8-同态映射的性质"><a href="#8-同态映射的性质" class="headerlink" title="8.同态映射的性质"></a>8.同态映射的性质</h3><blockquote><p>引子</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912184916204.png" alt="image-20220912184916204"></p><hr><h4 id="①可交换性和可结合性对应"><a href="#①可交换性和可结合性对应" class="headerlink" title="①可交换性和可结合性对应"></a>①可交换性和可结合性对应</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912185035888.png" alt="image-20220912185035888"></p><hr><h4 id="②单位元和零元一一对应"><a href="#②单位元和零元一一对应" class="headerlink" title="②单位元和零元一一对应"></a>②单位元和零元一一对应</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912185117127.png" alt="image-20220912185117127"></p><hr><h4 id="③逆元和等幂元一一对应"><a href="#③逆元和等幂元一一对应" class="headerlink" title="③逆元和等幂元一一对应"></a>③逆元和等幂元一一对应</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912185228760.png" alt="image-20220912185228760"></p><hr><ul><li><h6 id="示例-7"><a href="#示例-7" class="headerlink" title="示例"></a>示例</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912185323717.png" alt="image-20220912185323717"></p><hr><h4 id="④代数系统同态的意义"><a href="#④代数系统同态的意义" class="headerlink" title="④代数系统同态的意义"></a>④代数系统同态的意义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912185427481.png" alt="image-20220912185427481"></p><hr><h4 id="⑤同态概念推广"><a href="#⑤同态概念推广" class="headerlink" title="⑤同态概念推广"></a>⑤同态概念推广</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912185547073.png" alt="image-20220912185547073"></p><hr><h3 id="9-代数系统的应用"><a href="#9-代数系统的应用" class="headerlink" title="9.代数系统的应用"></a>9.代数系统的应用</h3><blockquote><p>引入问题分析</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912185845962.png" alt="image-20220912185845962"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912185924560.png" alt="image-20220912185924560"></p><hr><h4 id="①同余关系"><a href="#①同余关系" class="headerlink" title="①同余关系"></a>①同余关系</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912191325163.png" alt="image-20220912191325163"></p><hr><h4 id="②国际标准书号校验码"><a href="#②国际标准书号校验码" class="headerlink" title="②国际标准书号校验码"></a>②国际标准书号校验码</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912191522193.png" alt="image-20220912191522193"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912191550704.png" alt="image-20220912191550704"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220912191619888.png" alt="image-20220912191619888"></p><hr><h2 id="第七章-典型代数系统"><a href="#第七章-典型代数系统" class="headerlink" title="第七章 典型代数系统"></a>第七章 典型代数系统</h2><h3 id="1-半群和子半群"><a href="#1-半群和子半群" class="headerlink" title="1.半群和子半群"></a>1.半群和子半群</h3><h4 id="①半群的定义"><a href="#①半群的定义" class="headerlink" title="①半群的定义"></a>①半群的定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913222155634.png" alt="image-20220913222155634"></p><hr><blockquote><p>查看是否有结合性判断半群</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913222235401.png" alt="image-20220913222235401"></p><hr><ul><li><h6 id="示例-8"><a href="#示例-8" class="headerlink" title="示例"></a>示例</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913222347819.png" alt="image-20220913222347819"></p><hr><h4 id="②半群的性质"><a href="#②半群的性质" class="headerlink" title="②半群的性质"></a>②半群的性质</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913222705023.png" alt="image-20220913222705023"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913222745970.png" alt="image-20220913222745970"></p><hr><h4 id="③子半群的定义"><a href="#③子半群的定义" class="headerlink" title="③子半群的定义"></a>③子半群的定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913222819091.png" alt="image-20220913222819091"></p><hr><blockquote><p>根据封闭性判断是否是子半群</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913222925761.png" alt="image-20220913222925761"></p><hr><h3 id="2-独异点和子独异点"><a href="#2-独异点和子独异点" class="headerlink" title="2.独异点和子独异点"></a>2.独异点和子独异点</h3><h4 id="①独异点的定义"><a href="#①独异点的定义" class="headerlink" title="①独异点的定义"></a>①独异点的定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913223113167.png" alt="image-20220913223113167"></p><hr><blockquote><p>根据幺元判定独异点</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913223148240.png" alt="image-20220913223148240"></p><hr><h4 id="②子独异点的定义"><a href="#②子独异点的定义" class="headerlink" title="②子独异点的定义"></a>②子独异点的定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913223216029.png" alt="image-20220913223216029"></p><hr><blockquote><p>根据子群、相同幺元、封闭性判断子独异点</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913223301511.png" alt="image-20220913223301511"></p><hr><h3 id="3-群"><a href="#3-群" class="headerlink" title="3.群"></a>3.群</h3><h4 id="①群的定义"><a href="#①群的定义" class="headerlink" title="①群的定义"></a>①群的定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913223356346.png" alt="image-20220913223356346"></p><hr><blockquote><p>根据结合律、幺元、逆元判定群</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913223447137.png" alt="image-20220913223447137"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913223559503.png" alt="image-20220913223559503"></p><hr><h4 id="③群的阶数定义、无限群"><a href="#③群的阶数定义、无限群" class="headerlink" title="③群的阶数定义、无限群"></a>③群的阶数定义、无限群</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913223632134.png" alt="image-20220913223632134"></p><hr><h4 id="④元素的阶数"><a href="#④元素的阶数" class="headerlink" title="④元素的阶数"></a>④元素的阶数</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913223718154.png" alt="image-20220913223718154"></p><hr><h4 id="④群的应用-Klein四元群"><a href="#④群的应用-Klein四元群" class="headerlink" title="④群的应用 Klein四元群"></a>④群的应用 Klein四元群</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913223802326.png" alt="image-20220913223802326"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913223822159.png" alt="image-20220913223822159"></p><hr><h3 id="4-群的性质"><a href="#4-群的性质" class="headerlink" title="4.群的性质"></a>4.群的性质</h3><h4 id="①性质一"><a href="#①性质一" class="headerlink" title="①性质一"></a>①性质一</h4><blockquote><p>幺元是唯一的等幂元</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913223951611.png" alt="image-20220913223951611"></p><hr><h4 id="②性质二"><a href="#②性质二" class="headerlink" title="②性质二"></a>②性质二</h4><blockquote><p>G中至少有两个元素时，不存在零元</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913224028903.png" alt="image-20220913224028903"></p><hr><h4 id="③性质三"><a href="#③性质三" class="headerlink" title="③性质三"></a>③性质三</h4><blockquote><p>V a,b∈G， 如果a&#x3D;&#x3D;<em>&#x3D;&#x3D;b &#x3D;b或者b&#x3D;&#x3D;</em>&#x3D;&#x3D;a&#x3D;b， 则a是关于运算“*”的幺元。</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913224144763.png" alt="image-20220913224144763"></p><hr><h4 id="④性质四"><a href="#④性质四" class="headerlink" title="④性质四"></a>④性质四</h4><blockquote><p>任一元素都是可消去元</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913224348771.png" alt="image-20220913224348771"></p><hr><h4 id="⑤性质五"><a href="#⑤性质五" class="headerlink" title="⑤性质五"></a>⑤性质五</h4><blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913224608323.png" alt="image-20220913224608323"></p><p>待转换公式</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913224523379.png" alt="image-20220913224523379"></p><hr><h4 id="⑥性质六"><a href="#⑥性质六" class="headerlink" title="⑥性质六"></a>⑥性质六</h4><blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913224712899.png" alt="image-20220913224712899"></p><p>待转换公式</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913224707201.png" alt="image-20220913224707201"></p><hr><h4 id="⑦性质七"><a href="#⑦性质七" class="headerlink" title="⑦性质七"></a>⑦性质七</h4><blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913224811702.png" alt="image-20220913224811702"></p><p>待转换公式</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913224803526.png" alt="image-20220913224803526"></p><hr><h4 id="⑧⑨性质八九"><a href="#⑧⑨性质八九" class="headerlink" title="⑧⑨性质八九"></a>⑧⑨性质八九</h4><blockquote><p>待转换公式</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913224858935.png" alt="image-20220913224858935"></p><hr><h4 id="群性质的应用"><a href="#群性质的应用" class="headerlink" title="群性质的应用"></a>群性质的应用</h4><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913224942527.png" alt="image-20220913224942527"></p><hr><h3 id="5-子群"><a href="#5-子群" class="headerlink" title="5.子群"></a>5.子群</h3><h4 id="①子群的定义"><a href="#①子群的定义" class="headerlink" title="①子群的定义"></a>①子群的定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913225041978.png" alt="image-20220913225041978"></p><hr><h4 id="②子群的求解"><a href="#②子群的求解" class="headerlink" title="②子群的求解"></a>②子群的求解</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913225115756.png" alt="image-20220913225115756"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913225147143.png" alt="image-20220913225147143"></p><hr><h3 id="6-子群的性质"><a href="#6-子群的性质" class="headerlink" title="6.子群的性质"></a>6.子群的性质</h3><h4 id="性质一"><a href="#性质一" class="headerlink" title="性质一"></a>性质一</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913225714248.png" alt="image-20220913225714248"></p><hr><h4 id="性质二"><a href="#性质二" class="headerlink" title="性质二"></a>性质二</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913225734397.png" alt="image-20220913225734397"></p><hr><h4 id="性质三"><a href="#性质三" class="headerlink" title="性质三"></a>性质三</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913225754028.png" alt="image-20220913225754028"></p><hr><ul><li><h6 id="示例-9"><a href="#示例-9" class="headerlink" title="示例"></a>示例</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913225820443.png" alt="image-20220913225820443"></p><hr><h4 id="性质四"><a href="#性质四" class="headerlink" title="性质四"></a>性质四</h4><blockquote><p>有限子群的判定方法</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913225900764.png" alt="image-20220913225900764"></p><hr><h4 id="性质五"><a href="#性质五" class="headerlink" title="性质五"></a>性质五</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913230037078.png" alt="image-20220913230037078"></p><hr><h4 id="拉格朗日定理"><a href="#拉格朗日定理" class="headerlink" title="拉格朗日定理"></a>拉格朗日定理</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913230106821.png" alt="image-20220913230106821"></p><hr><h4 id="子群性质的应用-Klein"><a href="#子群性质的应用-Klein" class="headerlink" title="子群性质的应用 Klein"></a>子群性质的应用 Klein</h4><blockquote><p>Klein</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913230138208.png" alt="image-20220913230138208"></p><hr><h3 id="7-交换群和循环群"><a href="#7-交换群和循环群" class="headerlink" title="7.交换群和循环群"></a>7.交换群和循环群</h3><h4 id="①交换群的定义"><a href="#①交换群的定义" class="headerlink" title="①交换群的定义"></a>①交换群的定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913230317595.png" alt="image-20220913230317595"></p><hr><h4 id="②循环群的定义"><a href="#②循环群的定义" class="headerlink" title="②循环群的定义"></a>②循环群的定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913230534945.png" alt="image-20220913230534945"></p><hr><h4 id="③循环群的判定"><a href="#③循环群的判定" class="headerlink" title="③循环群的判定"></a>③循环群的判定</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913230657833.png" alt="image-20220913230657833"></p><hr><ul><li><h6 id="示例-10"><a href="#示例-10" class="headerlink" title="示例"></a>示例</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913230906982.png" alt="image-20220913230906982"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913230952657.png" alt="image-20220913230952657"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913231025226.png" alt="image-20220913231025226"></p><hr><h3 id="8-循环群的性质"><a href="#8-循环群的性质" class="headerlink" title="8.循环群的性质"></a>8.循环群的性质</h3><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913231340666.png" alt="image-20220913231340666"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913231402070.png" alt="image-20220913231402070"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913231426235.png" alt="image-20220913231426235"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913231449739.png" alt="image-20220913231449739"></p><hr><ul><li><h6 id="示例-11"><a href="#示例-11" class="headerlink" title="示例"></a>示例</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913231532622.png" alt="image-20220913231532622"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913231610704.png" alt="image-20220913231610704"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913231638639.png" alt="image-20220913231638639"></p><hr><h3 id="9-群的应用"><a href="#9-群的应用" class="headerlink" title="9.群的应用"></a>9.群的应用</h3><blockquote><p>引入</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913231958484.png" alt="image-20220913231958484"></p><hr><h4 id="奇偶校验码"><a href="#奇偶校验码" class="headerlink" title="奇偶校验码"></a>奇偶校验码</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913232040289.png" alt="image-20220913232040289"></p><hr><h4 id="汉明距离定义"><a href="#汉明距离定义" class="headerlink" title="汉明距离定义"></a>汉明距离定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913232111577.png" alt="image-20220913232111577"></p><hr><h4 id="汉明距离性质"><a href="#汉明距离性质" class="headerlink" title="汉明距离性质"></a>汉明距离性质</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913232150661.png" alt="image-20220913232150661"></p><hr><ul><li><h5 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h5></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913232223912.png" alt="image-20220913232223912"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913232252318.png" alt="image-20220913232252318"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913232315943.png" alt="image-20220913232315943"></p><hr><h2 id="第八章-图论基础"><a href="#第八章-图论基础" class="headerlink" title="第八章 图论基础"></a>第八章 图论基础</h2><h3 id="1-图的基本概念"><a href="#1-图的基本概念" class="headerlink" title="1.图的基本概念"></a>1.图的基本概念</h3><h4 id="①无序对、无序序偶、无序积"><a href="#①无序对、无序序偶、无序积" class="headerlink" title="①无序对、无序序偶、无序积"></a>①无序对、无序序偶、无序积</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913233142099.png" alt="image-20220913233142099"></p><hr><h4 id="②图的阶数、有向边、无向边、自环、关联边"><a href="#②图的阶数、有向边、无向边、自环、关联边" class="headerlink" title="②图的阶数、有向边、无向边、自环、关联边"></a>②图的阶数、有向边、无向边、自环、关联边</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913233343290.png" alt="image-20220913233343290"></p><hr><ul><li><h6 id="示例-12"><a href="#示例-12" class="headerlink" title="示例"></a>示例</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913233453999.png" alt="image-20220913233453999"></p><hr><h4 id="③重复边、重数"><a href="#③重复边、重数" class="headerlink" title="③重复边、重数"></a>③重复边、重数</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913233529142.png" alt="image-20220913233529142"></p><hr><h4 id="④图的分类定义"><a href="#④图的分类定义" class="headerlink" title="④图的分类定义"></a>④图的分类定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913234113609.png" alt="image-20220913234113609"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913234309606.png" alt="image-20220913234309606"></p><hr><h3 id="2-子图"><a href="#2-子图" class="headerlink" title="2.子图"></a>2.子图</h3><h4 id="①子图的定义"><a href="#①子图的定义" class="headerlink" title="①子图的定义"></a>①子图的定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913234604894.png" alt="image-20220913234604894"></p><hr><h4 id="②生成子图的定义"><a href="#②生成子图的定义" class="headerlink" title="②生成子图的定义"></a>②生成子图的定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913234734435.png" alt="image-20220913234734435"></p><hr><h4 id="④导出子图的定义"><a href="#④导出子图的定义" class="headerlink" title="④导出子图的定义"></a>④导出子图的定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913234841122.png" alt="image-20220913234841122"></p><hr><h4 id="示例-13"><a href="#示例-13" class="headerlink" title="示例"></a>示例</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913234926446.png" alt="image-20220913234926446"></p><h3 id="3-握手定理"><a href="#3-握手定理" class="headerlink" title="3.握手定理"></a>3.握手定理</h3><h4 id="①节点度数定义"><a href="#①节点度数定义" class="headerlink" title="①节点度数定义"></a>①节点度数定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913235237941.png" alt="image-20220913235237941"></p><hr><h4 id="②握手定理"><a href="#②握手定理" class="headerlink" title="②握手定理"></a>②握手定理</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913235624195.png" alt="image-20220913235624195"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913235645704.png" alt="image-20220913235645704"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913235708046.png" alt="image-20220913235708046"></p><hr><ul><li><h5 id="推论"><a href="#推论" class="headerlink" title="推论"></a>推论</h5></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913235750596.png" alt="image-20220913235750596"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220913235813285.png" alt="image-20220913235813285"></p><hr><ul><li><h6 id="示例-14"><a href="#示例-14" class="headerlink" title="示例"></a>示例</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914000224038.png" alt="image-20220914000224038"></p><hr><h4 id="③握手定理的应用"><a href="#③握手定理的应用" class="headerlink" title="③握手定理的应用"></a>③握手定理的应用</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914000306902.png" alt="image-20220914000306902"></p><hr><h3 id="4-图的同构"><a href="#4-图的同构" class="headerlink" title="4.图的同构"></a>4.图的同构</h3><h4 id="①图的同构定义"><a href="#①图的同构定义" class="headerlink" title="①图的同构定义"></a>①图的同构定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914000707724.png" alt="image-20220914000707724"></p><hr><h4 id="②图同构的必要条件"><a href="#②图同构的必要条件" class="headerlink" title="②图同构的必要条件"></a>②图同构的必要条件</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914000759322.png" alt="image-20220914000759322"></p><hr><h4 id="③同构实例"><a href="#③同构实例" class="headerlink" title="③同构实例"></a>③同构实例</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914000833623.png" alt="image-20220914000833623"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914000908049.png" alt="image-20220914000908049"></p><hr><h3 id="5-通路和回路"><a href="#5-通路和回路" class="headerlink" title="5.通路和回路"></a>5.通路和回路</h3><h4 id="①通路和回路的定义"><a href="#①通路和回路的定义" class="headerlink" title="①通路和回路的定义"></a>①通路和回路的定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914001048792.png" alt="image-20220914001048792"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914001127133.png" alt="image-20220914001127133"></p><hr><h4 id="②通路和回路的性质"><a href="#②通路和回路的性质" class="headerlink" title="②通路和回路的性质"></a>②通路和回路的性质</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914001337308.png" alt="image-20220914001337308"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914001401719.png" alt="image-20220914001401719"></p><hr><h4 id="示例-15"><a href="#示例-15" class="headerlink" title="示例"></a>示例</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914001424052.png" alt="image-20220914001424052"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914001510524.png" alt="image-20220914001510524"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914001535317.png" alt="image-20220914001535317"></p><hr><h3 id="6-图的连通性"><a href="#6-图的连通性" class="headerlink" title="6.图的连通性"></a>6.图的连通性</h3><h4 id="①无向图的连通性"><a href="#①无向图的连通性" class="headerlink" title="①无向图的连通性"></a>①无向图的连通性</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914001750842.png" alt="image-20220914001750842"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914001841937.png" alt="image-20220914001841937"></p><hr><h4 id="②连通分支"><a href="#②连通分支" class="headerlink" title="②连通分支"></a>②连通分支</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914001936442.png" alt="image-20220914001936442"></p><hr><h4 id="③有向图的连通性"><a href="#③有向图的连通性" class="headerlink" title="③有向图的连通性"></a>③有向图的连通性</h4><blockquote><p>弱连通图、单向连通图、强连通图</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914002043138.png" alt="image-20220914002043138"></p><hr><blockquote><p>弱连通分支、单向连通分支、强连通分支</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914002228111.png" alt="image-20220914002228111"></p><hr><h4 id="④示例"><a href="#④示例" class="headerlink" title="④示例"></a>④示例</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914002349322.png" alt="image-20220914002349322"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914002408422.png" alt="image-20220914002408422"></p><hr><h3 id="7-图的操作"><a href="#7-图的操作" class="headerlink" title="7.图的操作"></a>7.图的操作</h3><h4 id="①删除边"><a href="#①删除边" class="headerlink" title="①删除边"></a>①删除边</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914002554309.png" alt="image-20220914002554309"></p><hr><h4 id="②删除结点"><a href="#②删除结点" class="headerlink" title="②删除结点"></a>②删除结点</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914002718412.png" alt="image-20220914002718412"></p><hr><h4 id="③收缩边"><a href="#③收缩边" class="headerlink" title="③收缩边"></a>③收缩边</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914002756510.png" alt="image-20220914002756510"></p><hr><h4 id="示例-16"><a href="#示例-16" class="headerlink" title="示例"></a>示例</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914003606993.png" alt="image-20220914003606993"></p><hr><h3 id="8-图的表示"><a href="#8-图的表示" class="headerlink" title="8.图的表示"></a>8.图的表示</h3><h4 id="①关联矩阵表示"><a href="#①关联矩阵表示" class="headerlink" title="①关联矩阵表示"></a>①关联矩阵表示</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914004945991.png" alt="image-20220914004945991"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914005005546.png" alt="image-20220914005005546"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914005113770.png" alt="image-20220914005113770"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914005132981.png" alt="image-20220914005132981"></p><hr><h4 id="②邻接矩阵表示"><a href="#②邻接矩阵表示" class="headerlink" title="②邻接矩阵表示"></a>②邻接矩阵表示</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914005356166.png" alt="image-20220914005356166"></p><hr><h4 id="③可达矩阵表示"><a href="#③可达矩阵表示" class="headerlink" title="③可达矩阵表示"></a>③可达矩阵表示</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914005451716.png" alt="image-20220914005451716"></p><hr><h3 id="9-赋权图和最短通路问题"><a href="#9-赋权图和最短通路问题" class="headerlink" title="9.赋权图和最短通路问题"></a>9.赋权图和最短通路问题</h3><h4 id="①赋权图定义"><a href="#①赋权图定义" class="headerlink" title="①赋权图定义"></a>①赋权图定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914005709715.png" alt="image-20220914005709715"></p><hr><h4 id="②边权矩阵定义"><a href="#②边权矩阵定义" class="headerlink" title="②边权矩阵定义"></a>②边权矩阵定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914005821428.png" alt="image-20220914005821428"></p><hr><h4 id="③最短通路问题"><a href="#③最短通路问题" class="headerlink" title="③最短通路问题"></a>③最短通路问题</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914005856864.png" alt="image-20220914005856864"></p><hr><ul><li><h6 id="示例-17"><a href="#示例-17" class="headerlink" title="示例"></a>示例</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914005923495.png" alt="image-20220914005923495"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914005944394.png" alt="image-20220914005944394"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914010043380.png" alt="image-20220914010043380"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914010120456.png" alt="image-20220914010120456"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914010156551.png" alt="image-20220914010156551"></p><hr><h4 id="④最短通路问题的应用-设备更新问题"><a href="#④最短通路问题的应用-设备更新问题" class="headerlink" title="④最短通路问题的应用-设备更新问题"></a>④最短通路问题的应用-设备更新问题</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914010318557.png" alt="image-20220914010318557"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914010341007.png" alt="image-20220914010341007"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914010401347.png" alt="image-20220914010401347"></p><hr><h3 id="10-欧拉图及其应用"><a href="#10-欧拉图及其应用" class="headerlink" title="10.欧拉图及其应用"></a>10.欧拉图及其应用</h3><h4 id="①哥尼斯堡七桥问题"><a href="#①哥尼斯堡七桥问题" class="headerlink" title="①哥尼斯堡七桥问题"></a>①哥尼斯堡七桥问题</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914010534526.png" alt="image-20220914010534526"></p><hr><h4 id="②欧拉图定义"><a href="#②欧拉图定义" class="headerlink" title="②欧拉图定义"></a>②欧拉图定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914010615896.png" alt="image-20220914010615896"></p><hr><h4 id="③欧拉图的判定"><a href="#③欧拉图的判定" class="headerlink" title="③欧拉图的判定"></a>③欧拉图的判定</h4><blockquote><p>无向欧拉图的判定定理</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914010654214.png" alt="image-20220914010654214"></p><hr><blockquote><p>有向欧拉图的判定定理</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914010802435.png" alt="image-20220914010802435"></p><hr><h4 id="④欧拉图的应用"><a href="#④欧拉图的应用" class="headerlink" title="④欧拉图的应用"></a>④欧拉图的应用</h4><blockquote><p>蚂蚁赛跑问题</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914010909844.png" alt="image-20220914010909844"></p><hr><blockquote><p>道路清扫车问题</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914010953867.png" alt="image-20220914010953867"></p><hr><h3 id="11-哈密顿图及其应用"><a href="#11-哈密顿图及其应用" class="headerlink" title="11.哈密顿图及其应用"></a>11.哈密顿图及其应用</h3><blockquote><p>引入</p></blockquote><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914011105134.png" alt="image-20220914011105134"></p><hr><h4 id="①哈密顿图定义"><a href="#①哈密顿图定义" class="headerlink" title="①哈密顿图定义"></a>①哈密顿图定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914011147278.png" alt="image-20220914011147278"></p><hr><h4 id="②哈密顿图的判定"><a href="#②哈密顿图的判定" class="headerlink" title="②哈密顿图的判定"></a>②哈密顿图的判定</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914011335560.png" alt="image-20220914011335560"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914011401498.png" alt="image-20220914011401498"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914011436273.png" alt="image-20220914011436273"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914011456872.png" alt="image-20220914011456872"></p><hr><h4 id="③哈密顿图的判定定理"><a href="#③哈密顿图的判定定理" class="headerlink" title="③哈密顿图的判定定理"></a>③哈密顿图的判定定理</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914011536736.png" alt="image-20220914011536736"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914011609404.png" alt="image-20220914011609404"></p><h4 id="④哈密顿图的应用"><a href="#④哈密顿图的应用" class="headerlink" title="④哈密顿图的应用"></a>④哈密顿图的应用</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914011709149.png" alt="image-20220914011709149"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914011726328.png" alt="image-20220914011726328"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914011744755.png" alt="image-20220914011744755"></p><hr><h4 id="欧拉图和哈密顿图的对比"><a href="#欧拉图和哈密顿图的对比" class="headerlink" title="欧拉图和哈密顿图的对比"></a>欧拉图和哈密顿图的对比</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914011237354.png" alt="image-20220914011237354"></p><hr><h2 id="第九章-树"><a href="#第九章-树" class="headerlink" title="第九章 树"></a>第九章 树</h2><h3 id="1-无向树"><a href="#1-无向树" class="headerlink" title="1.无向树"></a>1.无向树</h3><h4 id="①无向树定义"><a href="#①无向树定义" class="headerlink" title="①无向树定义"></a>①无向树定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914011914301.png" alt="image-20220914011914301"></p><hr><h4 id="②树的性质定理"><a href="#②树的性质定理" class="headerlink" title="②树的性质定理"></a>②树的性质定理</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914012008671.png" alt="image-20220914012008671"></p><hr><ul><li><h6 id="推导证明"><a href="#推导证明" class="headerlink" title="推导证明"></a>推导证明</h6></li></ul><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914012034735.png" alt="image-20220914012034735"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914012117990.png" alt="image-20220914012117990"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914012135214.png" alt="image-20220914012135214"></p><hr><h4 id="④树的应用"><a href="#④树的应用" class="headerlink" title="④树的应用"></a>④树的应用</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914012202492.png" alt="image-20220914012202492"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914012231116.png" alt="image-20220914012231116"></p><hr><h3 id="2-生成树"><a href="#2-生成树" class="headerlink" title="2.生成树"></a>2.生成树</h3><blockquote><p>问题引入</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914012337927.png" alt="image-20220914012337927"></p><hr><h4 id="①生成树的定义"><a href="#①生成树的定义" class="headerlink" title="①生成树的定义"></a>①生成树的定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914012410047.png" alt="image-20220914012410047"></p><hr><h4 id="②生成树的性质"><a href="#②生成树的性质" class="headerlink" title="②生成树的性质"></a>②生成树的性质</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914012447969.png" alt="image-20220914012447969"></p><hr><h4 id="③生成树算法"><a href="#③生成树算法" class="headerlink" title="③生成树算法"></a>③生成树算法</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914012521957.png" alt="image-20220914012521957"></p><hr><h3 id="3-最小生成树及其应用"><a href="#3-最小生成树及其应用" class="headerlink" title="3.最小生成树及其应用"></a>3.最小生成树及其应用</h3><blockquote><p>问题引入</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914012621010.png" alt="image-20220914012621010"></p><hr><h4 id="①最小生成树定义-边赋权树"><a href="#①最小生成树定义-边赋权树" class="headerlink" title="①最小生成树定义-边赋权树"></a>①最小生成树定义-边赋权树</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914012706573.png" alt="image-20220914012706573"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914012743031.png" alt="image-20220914012743031"></p><h4 id="②最小生成树算法-Kruskal避圈法"><a href="#②最小生成树算法-Kruskal避圈法" class="headerlink" title="②最小生成树算法-Kruskal避圈法"></a>②最小生成树算法-Kruskal避圈法</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914012853300.png" alt="image-20220914012853300"></p><hr><h4 id="③最小生成树算法-破圈法"><a href="#③最小生成树算法-破圈法" class="headerlink" title="③最小生成树算法-破圈法"></a>③最小生成树算法-破圈法</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914012935345.png" alt="image-20220914012935345"></p><hr><h4 id="④最小生成树的应用"><a href="#④最小生成树的应用" class="headerlink" title="④最小生成树的应用"></a>④最小生成树的应用</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914013006739.png" alt="image-20220914013006739"></p><hr><p>​<img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914013033054.png" alt="image-20220914013033054"></p><hr><h3 id="4-有向树和根树"><a href="#4-有向树和根树" class="headerlink" title="4.有向树和根树"></a>4.有向树和根树</h3><blockquote><p>引入</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914013136863.png" alt="image-20220914013136863"></p><hr><h4 id="①有向树定义"><a href="#①有向树定义" class="headerlink" title="①有向树定义"></a>①有向树定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914013202851.png" alt="image-20220914013202851"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914013227679.png" alt="image-20220914013227679"></p><hr><h4 id="②有向树的性质"><a href="#②有向树的性质" class="headerlink" title="②有向树的性质"></a>②有向树的性质</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914013256713.png" alt="image-20220914013256713"></p><hr><h4 id="③根树定义"><a href="#③根树定义" class="headerlink" title="③根树定义"></a>③根树定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914013334623.png" alt="image-20220914013334623"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914013355992.png" alt="image-20220914013355992"></p><hr><blockquote><p>儿子、兄弟、祖先、后代</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914013425952.png" alt="image-20220914013425952"></p><hr><h4 id="④根子树定义"><a href="#④根子树定义" class="headerlink" title="④根子树定义"></a>④根子树定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914013520733.png" alt="image-20220914013520733"></p><hr><h4 id="⑤根树的应用"><a href="#⑤根树的应用" class="headerlink" title="⑤根树的应用"></a>⑤根树的应用</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914013547513.png" alt="image-20220914013547513"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914013609125.png" alt="image-20220914013609125"></p><hr><h3 id="5-根树的遍历"><a href="#5-根树的遍历" class="headerlink" title="5.根树的遍历"></a>5.根树的遍历</h3><blockquote><p>引入</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914013714398.png" alt="image-20220914013714398"></p><hr><h4 id="①有序树定义"><a href="#①有序树定义" class="headerlink" title="①有序树定义"></a>①有序树定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914013753604.png" alt="image-20220914013753604"></p><hr><h4 id="②根树的遍历"><a href="#②根树的遍历" class="headerlink" title="②根树的遍历"></a>②根树的遍历</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914014035594.png" alt="image-20220914014035594"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914014057485.png" alt="image-20220914014057485"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914014126296.png" alt="image-20220914014126296"></p><hr><h4 id="③根树遍历的应用"><a href="#③根树遍历的应用" class="headerlink" title="③根树遍历的应用"></a>③根树遍历的应用</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914014221917.png" alt="image-20220914014221917"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914014307029.png" alt="image-20220914014307029"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914014337663.png" alt="image-20220914014337663"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914014400336.png" alt="image-20220914014400336"></p><hr><h3 id="6-二叉树"><a href="#6-二叉树" class="headerlink" title="6.二叉树"></a>6.二叉树</h3><blockquote><p>引入</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914014452926.png" alt="image-20220914014452926"></p><hr><h4 id="①二叉树的定义"><a href="#①二叉树的定义" class="headerlink" title="①二叉树的定义"></a>①二叉树的定义</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914014513684.png" alt="image-20220914014513684"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914014533694.png" alt="image-20220914014533694"></p><hr><h4 id="②二叉树的性质"><a href="#②二叉树的性质" class="headerlink" title="②二叉树的性质"></a>②二叉树的性质</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914014621503.png" alt="image-20220914014621503"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914014640408.png" alt="image-20220914014640408"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914014655280.png" alt="image-20220914014655280"></p><hr><h4 id="③前缀码"><a href="#③前缀码" class="headerlink" title="③前缀码"></a>③前缀码</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914014730740.png" alt="image-20220914014730740"></p><hr><h4 id="④二叉树的应用"><a href="#④二叉树的应用" class="headerlink" title="④二叉树的应用"></a>④二叉树的应用</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914014827401.png" alt="image-20220914014827401"></p><hr><h3 id="7-最优树及其应用"><a href="#7-最优树及其应用" class="headerlink" title="7.最优树及其应用"></a>7.最优树及其应用</h3><blockquote><p>引入</p></blockquote><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914014917796.png" alt="image-20220914014917796"></p><hr><h4 id="①叶赋权树"><a href="#①叶赋权树" class="headerlink" title="①叶赋权树"></a>①叶赋权树</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914015004499.png" alt="image-20220914015004499"></p><hr><h4 id="②最优二叉树"><a href="#②最优二叉树" class="headerlink" title="②最优二叉树"></a>②最优二叉树</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914015039739.png" alt="image-20220914015039739"></p><hr><h4 id="③最优树的构造-Huffman算法"><a href="#③最优树的构造-Huffman算法" class="headerlink" title="③最优树的构造-Huffman算法"></a>③最优树的构造-Huffman算法</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914015135331.png" alt="image-20220914015135331"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914015209368.png" alt="image-20220914015209368"></p><hr><blockquote><p>最优二叉树不一定唯一</p></blockquote><hr><h4 id="④最优树的应用"><a href="#④最优树的应用" class="headerlink" title="④最优树的应用"></a>④最优树的应用</h4><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914015303418.png" alt="image-20220914015303418"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914015340968.png" alt="image-20220914015340968"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914015357177.png" alt="image-20220914015357177"></p><hr><p><img src="/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0Discrete%20Mathematics.assets/image-20220914015430749.png" alt="image-20220914015430749"></p><hr><hr><hr><table><thead><tr><th>完</th><th>结</th><th>:cherry_blossom:</th><th>撒</th><th>花</th></tr></thead></table><hr><hr><hr>]]></content>
      
      
      <categories>
          
          <category> 大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown展开折叠功能</title>
      <link href="/2022/08/14/Markdown%E5%B1%95%E5%BC%80%E6%8A%98%E5%8F%A0%E5%8A%9F%E8%83%BD/"/>
      <url>/2022/08/14/Markdown%E5%B1%95%E5%BC%80%E6%8A%98%E5%8F%A0%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML-5-details标签"><a href="#HTML-5-details标签" class="headerlink" title="HTML 5 details标签"></a>HTML 5 details标签</h2><blockquote><p>details定义和用法</p></blockquote><p><code>&lt;details&gt; </code>标签用于描述文档或文档某个部分的细节。</p><blockquote><p>summary子标签</p></blockquote><p>标签可以为 details 定义标题。标题是可见的，</p><p><strong>用户点击标题时，会显示出 details</strong></p><p>而markdown中可以写HTML，于是可以使用如下HTML标签实现展开折叠功能：</p><p>&#96;<details><summary>详情展开&#x2F;收起</summary><br>被折叠的内容</p></details>`<details><summary>题目</summary>被折叠的内容</details><blockquote><p>details内嵌markdown语法内容</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&lt;details&gt;&lt;summary&gt;展开查看&lt;&#x2F;summary&gt;&lt;pre&gt;&lt;code&gt;System.out.println(&quot;Hello to see U!&quot;);&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;details&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details><summary>在details里面可以嵌套合法markdown语法，例如代码块等等</summary><pre><code>int main()&#123;    printf("hello world");    return 0;&#125;</code></pre></details><ul><li><input disabled="" type="checkbox"> 关于对应语言代码的高亮显示有待补充</li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown嵌入视频</title>
      <link href="/2022/08/14/Markdown%E5%B5%8C%E5%85%A5%E8%A7%86%E9%A2%91/"/>
      <url>/2022/08/14/Markdown%E5%B5%8C%E5%85%A5%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<h2 id="Markdown-嵌入视频"><a href="#Markdown-嵌入视频" class="headerlink" title="Markdown 嵌入视频"></a>Markdown 嵌入视频</h2><blockquote><p>由于 Markdown 支持 HTML 语法，会对相应的标签进行解析。所以我们可以通过 HTML 语法将视频放入到我们的 Markdown 中。</p></blockquote><p>用法如下：</p><p><code>&lt;iframe height=500 width=500 src=&quot;视频地址&quot;&gt;</code></p><p>其中 height 和 width 是 HTML 中的属性可以设置视频的大小，我们也可以使用 HTML 中的其他属性对插入视频进行相应设置。</p><h3 id="插入方法"><a href="#插入方法" class="headerlink" title="插入方法"></a>插入方法</h3><h6 id="本地插入方法"><a href="#本地插入方法" class="headerlink" title="本地插入方法"></a>本地插入方法</h6><p>在 src 中加入本地视频所对应的路径即可。</p><p><code>&lt;iframe height=500 width=500 src=&quot;本地视频路径&quot;&gt;</code></p><h6 id="在线插入方法"><a href="#在线插入方法" class="headerlink" title="在线插入方法"></a>在线插入方法</h6><p>在 src 中加入视频链接即可。</p><p><code>&lt;iframe height=500 width=500 src=&quot;在线视频链接&quot;&gt;</code></p><h3 id="B站视频解析"><a href="#B站视频解析" class="headerlink" title="B站视频解析"></a>B站视频解析</h3><blockquote><p>注：现在B站外链播放有限制了，只能做更改大小这类简单的了目前</p></blockquote><blockquote><p>以稚晖君自创机械键盘视频链接为例子</p></blockquote><p>原链接： <code>&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=856138376&amp;bvid=BV19V4y1J7Hx&amp;cid=782251995&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt;</code></p><p>修改后：<code>&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=856138376&amp;bvid=BV19V4y1J7Hx&amp;cid=782251995&amp;page=1&amp;high_quality=1&amp;danmaku=0&quot; allowfullscreen=&quot;allowfullscreen&quot; width=&quot;100%&quot; height=&quot;500&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; sandbox=&quot;allow-top-navigation allow-same-origin allow-forms allow-scripts&quot;&gt; &lt;/iframe&gt;</code></p><p>代码解释：</p><pre class="line-numbers language-none"><code class="language-none">BILIBILI 地址PC端参数    &amp;high_quality&#x3D;1   (1&#x3D;最高画质 0&#x3D;最低画质)    &amp;danmaku&#x3D;0   (1&#x3D;打开弹幕 0&#x3D;关闭弹幕)iframe 参数    allowfullscreen&#x3D;&quot;allowfullscreen&quot; #移动端全屏    sandbox&#x3D;&quot;allow-top-navigation allow-same-origin allow-forms allow-scripts&quot; #禁止弹出网页<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><iframe src="//player.bilibili.com/player.html?aid=856138376&bvid=BV19V4y1J7Hx&cid=782251995&page=1&high_quality=1&danmaku=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"> </iframe><blockquote><p>附属性解释</p></blockquote><table><thead><tr><th align="center">属性</th><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">align</td><td align="center">left right top middle bottom</td><td align="center">不赞成使用。请使用样式代替。规定如何根据周围的元素来对齐此框架。</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">frameborder</td><td align="center">10</td><td align="center">规定是否显示框架周围的边框。</td></tr><tr><td align="center">height</td><td align="center">pixels%</td><td align="center">规定 iframe 的高度。</td></tr><tr><td align="center">longdesc</td><td align="center">URL</td><td align="center">规定一个页面，该页面包含了有关iframe 的较长描述。</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">marginheight</td><td align="center">pixels</td><td align="center">定义 iframe的顶部和底部的边距。</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">marginwidth</td><td align="center">pixels</td><td align="center">定义 iframe的左侧和右侧的边距。</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">name</td><td align="center">frame_name</td><td align="center">规定 iframe 的名称。</td></tr><tr><td align="center">sandbox</td><td align="center">“”allow-formsallow-same-originallow-scriptsallow-top-navigation</td><td align="center">启用一系列对 &lt;_iframe&gt; 中内容的额外限制。</td></tr><tr><td align="center">scrolling</td><td align="center">yesnoauto</td><td align="center">规定是否在 iframe中显示滚动条。</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">seamless</td><td align="center">seamless</td><td align="center">规定 &lt;_iframe&gt; 看上去像是包含文档的一部分。</td></tr><tr><td align="center">src</td><td align="center">URL</td><td align="center">规定在 iframe中显示的文档的 URL。</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">srcdoc</td><td align="center">HTML_code</td><td align="center">规定在 &lt;_iframe&gt; 中显示的页面的 HTML 内容。</td></tr><tr><td align="center">width</td><td align="center">pixels%</td><td align="center">定义 iframe 的宽度。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/10/hello-world/"/>
      <url>/2022/08/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown入门手册</title>
      <link href="/2022/08/10/Markdown%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/"/>
      <url>/2022/08/10/Markdown%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h4 id="Design-by-寧"><a href="#Design-by-寧" class="headerlink" title="Design by 寧"></a>Design by 寧</h4><p>注：①此中大部分操作都可以使用ｔｙｐｏｒａ自带右键菜单进行操作。</p><p>​    ②Markdown兼容HTML。</p><hr><p>部分扩展语法需要在设置中打开<img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202208141747895.png" alt="markdown扩展语法"></p><hr><h1 id="一、块级元素"><a href="#一、块级元素" class="headerlink" title="一、块级元素"></a>一、块级元素</h1><h3 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h3><p><code># 标题一</code></p><p><code>## 标题二</code></p><p><code>### 标题三</code></p><p><code>#### 标题四</code></p><p><code>##### 标题五</code></p><p><code>###### 标题六</code></p><p>（在井号和后面的文本之间有一个空格相隔开，可以做到大小分级分配）</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote><p>引用</p></blockquote><p>通过&gt; 加文字进行引用，同样中间需要有空格隔开</p><p><code>&gt; 内容</code></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="①有序列表"><a href="#①有序列表" class="headerlink" title="①有序列表"></a>①有序列表</h4><p>（通过数字加小黑点加空格构成有序列表）</p><p><code>1. 内容</code></p><ol><li><p>把大象放进冰箱</p></li><li><p>把大象塞进去</p></li><li><p>关上冰箱</p></li></ol><h4 id="②无序列表"><a href="#②无序列表" class="headerlink" title="②无序列表"></a>②无序列表</h4><p>（通过短横线   -  或者  *   加空格构成无序列表）</p><p><code>- 内容</code>    或者    <code>* 内容</code></p><ul><li>和平精英</li><li>王者荣耀</li><li>英雄联盟</li></ul><h4 id="③任务列表"><a href="#③任务列表" class="headerlink" title="③任务列表"></a>③任务列表</h4><p>（通过短横线  -  加方括号  [ ]  构成任务列表)</p><p>（注意：短横线和方括号之间有空格，方括号里有空格，后面也有，也就是每一个符号之间都有）</p><p><code>- [ ] 内容</code></p><ul><li><input disabled="" type="checkbox"> 任务列表测试</li><li><input checked="" disabled="" type="checkbox"> 可以手动勾选前面的框表</li><li><input checked="" disabled="" type="checkbox"> 也可以通过用X把方括号里面的空格代替来勾选</li></ul><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>（通过三个英文反引号  &#96;&#96;&#96;  加编程语言名字开头，后接代码块，结束用三个反引号收尾）</p><p><code>```编程语言（代码块）```</code></p><p>（部分markdown编辑器可自动识别之后自动弹出代码块框架）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>（使用四个英文美元符号将公式括起来  $$$$  ，公式放在中间，行内为两个美元符号）</p><p><code>$$公式表达式$$</code></p><h4 id="frac-1-x"><a href="#frac-1-x" class="headerlink" title="$\frac{1}{x}$"></a>$\frac{1}{x}$</h4><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>（表头和结尾使用短杠  |  加名字）</p><p><code>|名字|</code></p><p><code>:---     :---:       ---:</code></p><p>（对齐方式使用冒号  ： 加短横线  -  ,短横线至少要有一个，如果在左边表示左对齐，在右边右对齐，两边都有居中对齐）</p><table><thead><tr><th align="left">姓名</th><th align="center">年龄</th><th align="right">成绩</th></tr></thead><tbody><tr><td align="left">王家宁</td><td align="center">19</td><td align="right">100</td></tr></tbody></table><p>typora可以自动识别并处理此类数据</p><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>（通过方括号  [ ]  内嵌一个帽子符号  ^  形成，注意全英文）</p><p>（下面的解释要在冒号后面加空格，冒号注意英文格式）</p><p><code>[^脚注]</code></p><p><code>[^对应脚注名字]: 解释</code></p><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202208131531556.jpeg" alt="脚注"> </p><p>一键三连<a href="%E7%82%B9%E8%B5%9E%E3%80%81%E6%8A%95%E5%B8%81%E3%80%81%E6%94%B6%E8%97%8F%EF%BC%8C%E6%9C%80%E5%A5%BD%E5%86%8D%E5%85%B3%E6%B3%A8%E4%B8%80%E4%B8%8B">^三连</a></p><h3 id="横线"><a href="#横线" class="headerlink" title="横线"></a>横线</h3><p>（使用三个短横线构成横线）</p><p><code>---</code></p><hr><h1 id="二、行内元素"><a href="#二、行内元素" class="headerlink" title="二、行内元素"></a>二、行内元素</h1><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h4 id="①普通链接"><a href="#①普通链接" class="headerlink" title="①普通链接"></a>①普通链接</h4><p>（使用方括号  [ ]  ，在里面写链接的名字，后接小括号  ( )  ，小括号内写链接的地址，注意使用全英文符号）</p><p>（链接地址后面可以用英文双引号写注释）</p><p><code>[百度](www.baidu.com&quot;一个搜索引擎&quot;)</code></p><p>例如：<a href="www.baidu.com%22%E4%B8%80%E4%B8%AA%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%22">百度</a></p><h4 id="②引用链接"><a href="#②引用链接" class="headerlink" title="②引用链接"></a>②引用链接</h4><p>（在中括号后面再加一个中括号里面写入ID，然后在后面将ID解释）</p><p><code>[百度][id]</code></p><p><code>[id]: www.baidu.com &quot;一个搜索引擎&quot;</code></p><p><a href="www.baidu.com" title="一个搜索引擎">百度</a></p><p>优点：若需要多次更改，则只需要更改ID即可</p><h4 id="③链接作为-目录-跳转-对应标题"><a href="#③链接作为-目录-跳转-对应标题" class="headerlink" title="③链接作为-目录-跳转-对应标题"></a>③链接作为-目录-跳转-对应标题</h4><p>（使用方括号  [ ]  ，在里面写链接的名字，后接小括号  ( )  ，小括号内写#加标题的名字）</p><p>（在这里井号和标题名字之间不需要空格，且无论跳转标题是几级标题，都只能用一个井号）</p><p>（&#x3D;&#x3D;在md文件中点击时需要用 Ctrl 加鼠标跳转&#x3D;&#x3D;）</p><p><code>[跳转代码块](#代码块)</code></p><p>例如：<a href="#%E4%BB%A3%E7%A0%81%E5%9D%97">跳转代码块</a></p><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>（直接使用URL加冒号，注意英文）</p><p><code>URL: www.baidu.com</code></p><p>URL：<a href="http://www.baidu.com/">http://www.baidu.com</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>（英文感叹号  !  加 方括号内有替代的文本，后面是英文括号，括号内有图片链接，同样可以英文双引号加说明文字）</p><p>（本体图片可以使用本地图片相对&#x2F;绝对地址，相对地址是指相对于本文件所在的文件夹的路径，绝对地址是指在电脑上的绝对地址）</p><p>不做演示了。</p><p><code>! [图片演示](假设有个链接 &quot;说明文字&quot;)</code></p><h1 id="三、其他行内格式"><a href="#三、其他行内格式" class="headerlink" title="三、其他行内格式"></a>三、其他行内格式</h1><h3 id="强调型（可组合使用）"><a href="#强调型（可组合使用）" class="headerlink" title="强调型（可组合使用）"></a>强调型（可组合使用）</h3><p>①一对星号表示斜体<code>*内容*</code></p><p>​<em>斜体测试</em></p><p>②两对星号表示加粗<code>**内容**</code></p><p>​<strong>加粗测试</strong></p><p>③三对星号则是斜体加粗<code>***内容***</code></p><p>​<em><strong>斜体加粗测试</strong></em></p><p>④使用HTML里面的u标签下划线达成下划线效果<code>&lt;u&gt;内容&lt;/u&gt;</code></p><p>​<u>下划线测试</u></p><p>⑤文字高亮使用两对等号<code>==内容==</code></p><p>​&#x3D;&#x3D;高亮文字测试&#x3D;&#x3D;</p><h3 id="代码相关"><a href="#代码相关" class="headerlink" title="代码相关"></a>代码相关</h3><p>行内代码使用一对英文反单引号<code>``</code></p><p>​<code>printf(&quot;行内代码测试&quot;)；</code></p><h3 id="表情代码"><a href="#表情代码" class="headerlink" title="表情代码"></a>表情代码</h3><p>格式：一个冒号   加上表情的名称再加上   一个冒号<code>:smlie:</code></p><p>​:smile::kissing_smiling_eyes::artificial_satellite:😄😄😄</p><p>（表情名称可以参考国际emoji通用代码，也可以直接复制过来）</p><p>网站：<a href="https://www.emojiall.com/zh-hans">Emoji大全 | Emoji表情符号词典 📓 | EmojiAll中文官方网站</a></p><h3 id="行内数学公式"><a href="#行内数学公式" class="headerlink" title="行内数学公式"></a>行内数学公式</h3><p>使用一对美元符号</p><p>​$\theta &#x3D; x^3$</p><h3 id="上、下标"><a href="#上、下标" class="headerlink" title="上、下标"></a>上、下标</h3><p>上标：使用尖帽子符号，注意是前后各两个<code>我^喜欢你^</code></p><p>​我^喜欢你^</p><p>下标：使用一对波浪号将其标记，同样是前后两个<code>H~2~O</code></p><p>​H<del>2</del>O</p><hr><h1 id="四、嵌入"><a href="#四、嵌入" class="headerlink" title="四、嵌入"></a>四、嵌入</h1><h3 id="①嵌入B站视频"><a href="#①嵌入B站视频" class="headerlink" title="①嵌入B站视频"></a>①嵌入B站视频</h3><p>以我所基于的B站学习视频为例，从分享中找到嵌入视频链接，复制到markdown编辑器中即可：</p><iframe src="//player.bilibili.com/player.html?aid=327623069&bvid=BV1JA411h7Gw&cid=171385214&page=1&high_quality=1&danmaku=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" border="0" frameborder="no" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"> </iframe><hr><h1 id="五、导出"><a href="#五、导出" class="headerlink" title="五、导出"></a>五、导出</h1><h3 id="插件Pandoc"><a href="#插件Pandoc" class="headerlink" title="插件Pandoc"></a>插件Pandoc</h3><p>在日常使用过程中，需要用到其他的格式，typora默认支持<code>.md</code>文件转<code>.pdf</code>与<code>.html</code>格式，其余的常见格式需要使用<code>pandoc</code>扩展程序来支持。 </p><p>在导出界面可以看到，typora本身支持的导出格式在横线之上。</p><p>而当点击其他格式时，会提示安装<code>pandoc</code>扩展文件。 </p><h4 id="①下载pandoc扩展程序"><a href="#①下载pandoc扩展程序" class="headerlink" title="①下载pandoc扩展程序"></a>①下载pandoc扩展程序</h4><p>进入<a href="https://github.com/jgm/pandoc/releases/tag/2.2.1">pandoc官网</a>，点击下载适合自己操作系统的版本</p><p>下载过程中，可能遇到下载失败，连接超时等情况，原因为：此官网为美国服务器，可能数据连接被墙，可自行想办法解决。</p><h4 id="②点击安装程序"><a href="#②点击安装程序" class="headerlink" title="②点击安装程序"></a>②点击安装程序</h4><p>点击<code>pandoc-2.19-windows-x86_64.msi</code>安装程序。（程序版本号根据自己所下载的版本定）</p><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202208131532929.jpeg" alt="安装程序"></p><p>选取第一个选项，第二个选项将需要获取管理员权限，点击安装。</p><p>安装为默认选项，没有可修改项，安装默认到C盘。</p><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202208131529303.png" alt="默认安装"></p><h4 id="③配置环境变量"><a href="#③配置环境变量" class="headerlink" title="③配置环境变量"></a>③配置环境变量</h4><p>安装完毕后，记得配置&#x3D;&#x3D;环境变量&#x3D;&#x3D;：</p><p>将安装目录放置于<code>path</code>中，默认安装会自动将路径配置到<code>path</code>中，如果有用户配置的path，则需要手动将其添加到系统path中。</p><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202208131532263.jpeg" alt="配置环境变量"></p><h4 id="④检测安装是否成功"><a href="#④检测安装是否成功" class="headerlink" title="④检测安装是否成功"></a>④检测安装是否成功</h4><p>运行<code>cmd</code>输入<code>pandoc --help</code>如果安装不成功，将提示<code>pandoc</code>不是系统程序。安装成功，将出现帮助项</p><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202208131532123.jpeg" alt="检测是否安装成功"></p><h4 id="⑤使用typora导出"><a href="#⑤使用typora导出" class="headerlink" title="⑤使用typora导出"></a>⑤使用typora导出</h4><p>在安装完<code>pandoc</code>之后，可使用typora的导出功能。</p><p>注：可能存在安装完之后，还是提示安装<code>pandoc</code>，此时可重新启动电脑，或者卸载typora，然后再安装。</p><p>完成上述操作之后，将可以方便的使用pandoc的<code>.md</code>转其他格式。</p><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202208131532910.jpeg" alt="使用插件导出"></p><p>typora将自动调用pandoc，并在后台静默操作。</p><h4 id="⑥Pandoc使用"><a href="#⑥Pandoc使用" class="headerlink" title="⑥Pandoc使用"></a>⑥Pandoc使用</h4><p>pandoc是一个很强大的文件转换工具，以上只阐述了使用typora来讲md文件导出为其他格式。<br>详细的pandoc转换方式，可以自行查看pandoc的帮助文档。</p><h1 id="六、注意事项"><a href="#六、注意事项" class="headerlink" title="六、注意事项"></a>六、注意事项</h1><h2 id="①Pandoc导出word错误"><a href="#①Pandoc导出word错误" class="headerlink" title="①Pandoc导出word错误"></a>①Pandoc导出word错误</h2><p>如果安装了pandoc，显示： couldn’t read <a href="https://so.csdn.net/so/search?q=native&spm=1001.2101.3001.7020">native</a>。 <img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202208131532098.png" alt="导出失败提示"> </p><p>原因：&#x3D;&#x3D;由于原文档中包含表格，导出word格式不成立&#x3D;&#x3D;。<br><strong>方法1</strong>：删掉表格，导出后手动加入到文档。<br><strong>方法2</strong>：<br>①在.md文档所在目录打开<a href="https://so.csdn.net/so/search?q=cmd&spm=1001.2101.3001.7020">cmd</a>终端；<br>②输入：</p><pre class="line-numbers language-none"><code class="language-none">pandoc -s 原文档名字.md -o 新名字.docx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blogimage-1-1313323272.cos.ap-nanjing.myqcloud.com/Img/202208131532952.png" alt="改名字导出"></p><p>回车即可。</p><p>注：此二种方法均为于CSDN查阅。</p><p>相关网址：<a href="https://blog.csdn.net/qq_43211132/article/details/120082073">(33条消息) Typora导出word失败_奔跑的小仙女的博客-CSDN博客_typora导出word失败</a> </p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
